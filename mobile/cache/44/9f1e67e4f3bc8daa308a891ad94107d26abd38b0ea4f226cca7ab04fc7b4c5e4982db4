{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"./base64.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":44,"column":21,"index":2026},"end":{"line":44,"column":43,"index":2048}}],"key":"57tD+ATonoPSZcgDyKyIOXIEsKM=","exportNames":["*"],"imports":1}},{"name":"../common/index.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":45,"column":20,"index":2074},"end":{"line":45,"column":49,"index":2103}}],"key":"+dMPzOEbG0ps7baSMj3MqJbvg8c=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\").default;\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __export = (target, all) => {\n    for (var name in all) __defProp(target, name, {\n      get: all[name],\n      enumerable: true\n    });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      var _loop = function (key) {\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n          get: () => from[key],\n          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n      };\n      for (var key of __getOwnPropNames(from)) {\n        _loop(key);\n      }\n    }\n    return to;\n  };\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n    value: mod,\n    enumerable: true\n  }) : target, mod));\n  var __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n    value: true\n  }), mod);\n  var value_exports = {};\n  __export(value_exports, {\n    base64ToBigInt: () => base64ToBigInt,\n    bigIntToBase64: () => bigIntToBase64,\n    convexOrUndefinedToJson: () => convexOrUndefinedToJson,\n    convexToJson: () => convexToJson,\n    jsonToConvex: () => jsonToConvex,\n    modernBase64ToBigInt: () => modernBase64ToBigInt,\n    modernBigIntToBase64: () => modernBigIntToBase64,\n    patchValueToJson: () => patchValueToJson,\n    slowBase64ToBigInt: () => slowBase64ToBigInt,\n    slowBigIntToBase64: () => slowBigIntToBase64,\n    stringifyValueForError: () => stringifyValueForError\n  });\n  module.exports = __toCommonJS(value_exports);\n  var Base64 = __toESM(require(_dependencyMap[1], \"./base64.js\"), 1);\n  var import_common = require(_dependencyMap[2], \"../common/index.js\");\n  var LITTLE_ENDIAN = true;\n  var MIN_INT64 = BigInt(\"-9223372036854775808\");\n  var MAX_INT64 = BigInt(\"9223372036854775807\");\n  var ZERO = BigInt(\"0\");\n  var EIGHT = BigInt(\"8\");\n  var TWOFIFTYSIX = BigInt(\"256\");\n  function isSpecial(n) {\n    return Number.isNaN(n) || !Number.isFinite(n) || Object.is(n, -0);\n  }\n  function slowBigIntToBase64(value) {\n    if (value < ZERO) {\n      value -= MIN_INT64 + MIN_INT64;\n    }\n    var hex = value.toString(16);\n    if (hex.length % 2 === 1) hex = \"0\" + hex;\n    var bytes = new Uint8Array(new ArrayBuffer(8));\n    var i = 0;\n    for (var hexByte of hex.match(/.{2}/g).reverse()) {\n      bytes.set([parseInt(hexByte, 16)], i++);\n      value >>= EIGHT;\n    }\n    return Base64.fromByteArray(bytes);\n  }\n  function slowBase64ToBigInt(encoded) {\n    var integerBytes = Base64.toByteArray(encoded);\n    if (integerBytes.byteLength !== 8) {\n      throw new Error(`Received ${integerBytes.byteLength} bytes, expected 8 for $integer`);\n    }\n    var value = ZERO;\n    var power = ZERO;\n    for (var byte of integerBytes) {\n      value += BigInt(byte) * TWOFIFTYSIX ** power;\n      power++;\n    }\n    if (value > MAX_INT64) {\n      value += MIN_INT64 + MIN_INT64;\n    }\n    return value;\n  }\n  function modernBigIntToBase64(value) {\n    if (value < MIN_INT64 || MAX_INT64 < value) {\n      throw new Error(`BigInt ${value} does not fit into a 64-bit signed integer.`);\n    }\n    var buffer = new ArrayBuffer(8);\n    new DataView(buffer).setBigInt64(0, value, true);\n    return Base64.fromByteArray(new Uint8Array(buffer));\n  }\n  function modernBase64ToBigInt(encoded) {\n    var integerBytes = Base64.toByteArray(encoded);\n    if (integerBytes.byteLength !== 8) {\n      throw new Error(`Received ${integerBytes.byteLength} bytes, expected 8 for $integer`);\n    }\n    var intBytesView = new DataView(integerBytes.buffer);\n    return intBytesView.getBigInt64(0, true);\n  }\n  var bigIntToBase64 = DataView.prototype.setBigInt64 ? modernBigIntToBase64 : slowBigIntToBase64;\n  var base64ToBigInt = DataView.prototype.getBigInt64 ? modernBase64ToBigInt : slowBase64ToBigInt;\n  var MAX_IDENTIFIER_LEN = 1024;\n  function validateObjectField(k) {\n    if (k.length > MAX_IDENTIFIER_LEN) {\n      throw new Error(`Field name ${k} exceeds maximum field name length ${MAX_IDENTIFIER_LEN}.`);\n    }\n    if (k.startsWith(\"$\")) {\n      throw new Error(`Field name ${k} starts with a '$', which is reserved.`);\n    }\n    for (var i = 0; i < k.length; i += 1) {\n      var charCode = k.charCodeAt(i);\n      if (charCode < 32 || charCode >= 127) {\n        throw new Error(`Field name ${k} has invalid character '${k[i]}': Field names can only contain non-control ASCII characters`);\n      }\n    }\n  }\n  function jsonToConvex(value) {\n    if (value === null) {\n      return value;\n    }\n    if (typeof value === \"boolean\") {\n      return value;\n    }\n    if (typeof value === \"number\") {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      return value;\n    }\n    if (Array.isArray(value)) {\n      return value.map(value2 => jsonToConvex(value2));\n    }\n    if (typeof value !== \"object\") {\n      throw new Error(`Unexpected type of ${value}`);\n    }\n    var entries = Object.entries(value);\n    if (entries.length === 1) {\n      var key = entries[0][0];\n      if (key === \"$bytes\") {\n        if (typeof value.$bytes !== \"string\") {\n          throw new Error(`Malformed $bytes field on ${value}`);\n        }\n        return Base64.toByteArray(value.$bytes).buffer;\n      }\n      if (key === \"$integer\") {\n        if (typeof value.$integer !== \"string\") {\n          throw new Error(`Malformed $integer field on ${value}`);\n        }\n        return base64ToBigInt(value.$integer);\n      }\n      if (key === \"$float\") {\n        if (typeof value.$float !== \"string\") {\n          throw new Error(`Malformed $float field on ${value}`);\n        }\n        var floatBytes = Base64.toByteArray(value.$float);\n        if (floatBytes.byteLength !== 8) {\n          throw new Error(`Received ${floatBytes.byteLength} bytes, expected 8 for $float`);\n        }\n        var floatBytesView = new DataView(floatBytes.buffer);\n        var float = floatBytesView.getFloat64(0, LITTLE_ENDIAN);\n        if (!isSpecial(float)) {\n          throw new Error(`Float ${float} should be encoded as a number`);\n        }\n        return float;\n      }\n      if (key === \"$set\") {\n        throw new Error(`Received a Set which is no longer supported as a Convex type.`);\n      }\n      if (key === \"$map\") {\n        throw new Error(`Received a Map which is no longer supported as a Convex type.`);\n      }\n    }\n    var out = {};\n    for (var _ref of Object.entries(value)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n      var k = _ref2[0];\n      var v = _ref2[1];\n      validateObjectField(k);\n      out[k] = jsonToConvex(v);\n    }\n    return out;\n  }\n  function stringifyValueForError(value) {\n    return JSON.stringify(value, (_key, value2) => {\n      if (value2 === void 0) {\n        return \"undefined\";\n      }\n      if (typeof value2 === \"bigint\") {\n        return `${value2.toString()}n`;\n      }\n      return value2;\n    });\n  }\n  function convexToJsonInternal(value, originalValue, context, includeTopLevelUndefined) {\n    if (value === void 0) {\n      var contextText = context && ` (present at path ${context} in original object ${stringifyValueForError(originalValue)})`;\n      throw new Error(`undefined is not a valid Convex value${contextText}. To learn about Convex's supported types, see https://docs.convex.dev/using/types.`);\n    }\n    if (value === null) {\n      return value;\n    }\n    if (typeof value === \"bigint\") {\n      if (value < MIN_INT64 || MAX_INT64 < value) {\n        throw new Error(`BigInt ${value} does not fit into a 64-bit signed integer.`);\n      }\n      return {\n        $integer: bigIntToBase64(value)\n      };\n    }\n    if (typeof value === \"number\") {\n      if (isSpecial(value)) {\n        var buffer = new ArrayBuffer(8);\n        new DataView(buffer).setFloat64(0, value, LITTLE_ENDIAN);\n        return {\n          $float: Base64.fromByteArray(new Uint8Array(buffer))\n        };\n      } else {\n        return value;\n      }\n    }\n    if (typeof value === \"boolean\") {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      return value;\n    }\n    if (value instanceof ArrayBuffer) {\n      return {\n        $bytes: Base64.fromByteArray(new Uint8Array(value))\n      };\n    }\n    if (Array.isArray(value)) {\n      return value.map((value2, i) => convexToJsonInternal(value2, originalValue, context + `[${i}]`, false));\n    }\n    if (value instanceof Set) {\n      throw new Error(errorMessageForUnsupportedType(context, \"Set\", [...value], originalValue));\n    }\n    if (value instanceof Map) {\n      throw new Error(errorMessageForUnsupportedType(context, \"Map\", [...value], originalValue));\n    }\n    if (!(0, import_common.isSimpleObject)(value)) {\n      var theType = value?.constructor?.name;\n      var typeName = theType ? `${theType} ` : \"\";\n      throw new Error(errorMessageForUnsupportedType(context, typeName, value, originalValue));\n    }\n    var out = {};\n    var entries = Object.entries(value);\n    entries.sort((_ref3, _ref4) => {\n      var _ref5 = _slicedToArray(_ref3, 2),\n        k1 = _ref5[0],\n        _v1 = _ref5[1];\n      var _ref6 = _slicedToArray(_ref4, 2),\n        k2 = _ref6[0],\n        _v2 = _ref6[1];\n      return k1 === k2 ? 0 : k1 < k2 ? -1 : 1;\n    });\n    for (var _ref7 of entries) {\n      var _ref8 = _slicedToArray(_ref7, 2);\n      var k = _ref8[0];\n      var v = _ref8[1];\n      if (v !== void 0) {\n        validateObjectField(k);\n        out[k] = convexToJsonInternal(v, originalValue, context + `.${k}`, false);\n      } else if (includeTopLevelUndefined) {\n        validateObjectField(k);\n        out[k] = convexOrUndefinedToJsonInternal(v, originalValue, context + `.${k}`);\n      }\n    }\n    return out;\n  }\n  function errorMessageForUnsupportedType(context, typeName, value, originalValue) {\n    if (context) {\n      return `${typeName}${stringifyValueForError(value)} is not a supported Convex type (present at path ${context} in original object ${stringifyValueForError(originalValue)}). To learn about Convex's supported types, see https://docs.convex.dev/using/types.`;\n    } else {\n      return `${typeName}${stringifyValueForError(value)} is not a supported Convex type.`;\n    }\n  }\n  function convexOrUndefinedToJsonInternal(value, originalValue, context) {\n    if (value === void 0) {\n      return {\n        $undefined: null\n      };\n    } else {\n      if (originalValue === void 0) {\n        throw new Error(`Programming error. Current value is ${stringifyValueForError(value)} but original value is undefined`);\n      }\n      return convexToJsonInternal(value, originalValue, context, false);\n    }\n  }\n  function convexToJson(value) {\n    return convexToJsonInternal(value, value, \"\", false);\n  }\n  function convexOrUndefinedToJson(value) {\n    return convexOrUndefinedToJsonInternal(value, value, \"\");\n  }\n  function patchValueToJson(value) {\n    return convexToJsonInternal(value, value, \"\", true);\n  }\n});","lineCount":314,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[4,90,1,13,"default"],[4,97,1,13],[5,2,2,0],[5,6,2,4,"__create"],[5,14,2,12],[5,17,2,15,"Object"],[5,23,2,21],[5,24,2,22,"create"],[5,30,2,28],[6,2,3,0],[6,6,3,4,"__defProp"],[6,15,3,13],[6,18,3,16,"Object"],[6,24,3,22],[6,25,3,23,"defineProperty"],[6,39,3,37],[7,2,4,0],[7,6,4,4,"__getOwnPropDesc"],[7,22,4,20],[7,25,4,23,"Object"],[7,31,4,29],[7,32,4,30,"getOwnPropertyDescriptor"],[7,56,4,54],[8,2,5,0],[8,6,5,4,"__getOwnPropNames"],[8,23,5,21],[8,26,5,24,"Object"],[8,32,5,30],[8,33,5,31,"getOwnPropertyNames"],[8,52,5,50],[9,2,6,0],[9,6,6,4,"__getProtoOf"],[9,18,6,16],[9,21,6,19,"Object"],[9,27,6,25],[9,28,6,26,"getPrototypeOf"],[9,42,6,40],[10,2,7,0],[10,6,7,4,"__hasOwnProp"],[10,18,7,16],[10,21,7,19,"Object"],[10,27,7,25],[10,28,7,26,"prototype"],[10,37,7,35],[10,38,7,36,"hasOwnProperty"],[10,52,7,50],[11,2,8,0],[11,6,8,4,"__export"],[11,14,8,12],[11,17,8,15,"__export"],[11,18,8,16,"target"],[11,24,8,22],[11,26,8,24,"all"],[11,29,8,27],[11,34,8,32],[12,4,9,2],[12,9,9,7],[12,13,9,11,"name"],[12,17,9,15],[12,21,9,19,"all"],[12,24,9,22],[12,26,10,4,"__defProp"],[12,35,10,13],[12,36,10,14,"target"],[12,42,10,20],[12,44,10,22,"name"],[12,48,10,26],[12,50,10,28],[13,6,10,30,"get"],[13,9,10,33],[13,11,10,35,"all"],[13,14,10,38],[13,15,10,39,"name"],[13,19,10,43],[13,20,10,44],[14,6,10,46,"enumerable"],[14,16,10,56],[14,18,10,58],[15,4,10,63],[15,5,10,64],[15,6,10,65],[16,2,11,0],[16,3,11,1],[17,2,12,0],[17,6,12,4,"__copyProps"],[17,17,12,15],[17,20,12,18,"__copyProps"],[17,21,12,19,"to"],[17,23,12,21],[17,25,12,23,"from"],[17,29,12,27],[17,31,12,29,"except"],[17,37,12,35],[17,39,12,37,"desc"],[17,43,12,41],[17,48,12,46],[18,4,13,2],[18,8,13,6,"from"],[18,12,13,10],[18,16,13,14],[18,23,13,21,"from"],[18,27,13,25],[18,32,13,30],[18,40,13,38],[18,44,13,42],[18,51,13,49,"from"],[18,55,13,53],[18,60,13,58],[18,70,13,68],[18,72,13,70],[19,6,13,70],[19,10,13,70,"_loop"],[19,15,13,70],[19,27,13,70,"_loop"],[19,28,13,70,"key"],[19,31,13,70],[20,8,15,6],[20,12,15,10],[20,13,15,11,"__hasOwnProp"],[20,25,15,23],[20,26,15,24,"call"],[20,30,15,28],[20,31,15,29,"to"],[20,33,15,31],[20,35,15,33,"key"],[20,38,15,36],[20,39,15,37],[20,43,15,41,"key"],[20,46,15,44],[20,51,15,49,"except"],[20,57,15,55],[20,59,16,8,"__defProp"],[20,68,16,17],[20,69,16,18,"to"],[20,71,16,20],[20,73,16,22,"key"],[20,76,16,25],[20,78,16,27],[21,10,16,29,"get"],[21,13,16,32],[21,15,16,34,"get"],[21,16,16,34],[21,21,16,40,"from"],[21,25,16,44],[21,26,16,45,"key"],[21,29,16,48],[21,30,16,49],[22,10,16,51,"enumerable"],[22,20,16,61],[22,22,16,63],[22,24,16,65,"desc"],[22,28,16,69],[22,31,16,72,"__getOwnPropDesc"],[22,47,16,88],[22,48,16,89,"from"],[22,52,16,93],[22,54,16,95,"key"],[22,57,16,98],[22,58,16,99],[22,59,16,100],[22,63,16,104,"desc"],[22,67,16,108],[22,68,16,109,"enumerable"],[23,8,16,120],[23,9,16,121],[23,10,16,122],[24,6,16,123],[25,6,14,4],[25,11,14,9],[25,15,14,13,"key"],[25,18,14,16],[25,22,14,20,"__getOwnPropNames"],[25,39,14,37],[25,40,14,38,"from"],[25,44,14,42],[25,45,14,43],[26,8,14,43,"_loop"],[26,13,14,43],[26,14,14,43,"key"],[26,17,14,43],[27,6,14,43],[28,4,17,2],[29,4,18,2],[29,11,18,9,"to"],[29,13,18,11],[30,2,19,0],[30,3,19,1],[31,2,20,0],[31,6,20,4,"__toESM"],[31,13,20,11],[31,16,20,14,"__toESM"],[31,17,20,15,"mod"],[31,20,20,18],[31,22,20,20,"isNodeMode"],[31,32,20,30],[31,34,20,32,"target"],[31,40,20,38],[31,46,20,44,"target"],[31,52,20,50],[31,55,20,53,"mod"],[31,58,20,56],[31,62,20,60],[31,66,20,64],[31,69,20,67,"__create"],[31,77,20,75],[31,78,20,76,"__getProtoOf"],[31,90,20,88],[31,91,20,89,"mod"],[31,94,20,92],[31,95,20,93],[31,96,20,94],[31,99,20,97],[31,100,20,98],[31,101,20,99],[31,103,20,101,"__copyProps"],[31,114,20,112],[32,2,21,2],[33,2,22,2],[34,2,23,2],[35,2,24,2],[36,2,25,2,"isNodeMode"],[36,12,25,12],[36,16,25,16],[36,17,25,17,"mod"],[36,20,25,20],[36,24,25,24],[36,25,25,25,"mod"],[36,28,25,28],[36,29,25,29,"__esModule"],[36,39,25,39],[36,42,25,42,"__defProp"],[36,51,25,51],[36,52,25,52,"target"],[36,58,25,58],[36,60,25,60],[36,69,25,69],[36,71,25,71],[37,4,25,73,"value"],[37,9,25,78],[37,11,25,80,"mod"],[37,14,25,83],[38,4,25,85,"enumerable"],[38,14,25,95],[38,16,25,97],[39,2,25,102],[39,3,25,103],[39,4,25,104],[39,7,25,107,"target"],[39,13,25,113],[39,15,26,2,"mod"],[39,18,27,0],[39,19,27,1],[39,20,27,2],[40,2,28,0],[40,6,28,4,"__toCommonJS"],[40,18,28,16],[40,21,28,20,"mod"],[40,24,28,23],[40,28,28,28,"__copyProps"],[40,39,28,39],[40,40,28,40,"__defProp"],[40,49,28,49],[40,50,28,50],[40,51,28,51],[40,52,28,52],[40,54,28,54],[40,66,28,66],[40,68,28,68],[41,4,28,70,"value"],[41,9,28,75],[41,11,28,77],[42,2,28,82],[42,3,28,83],[42,4,28,84],[42,6,28,86,"mod"],[42,9,28,89],[42,10,28,90],[43,2,29,0],[43,6,29,4,"value_exports"],[43,19,29,17],[43,22,29,20],[43,23,29,21],[43,24,29,22],[44,2,30,0,"__export"],[44,10,30,8],[44,11,30,9,"value_exports"],[44,24,30,22],[44,26,30,24],[45,4,31,2,"base64ToBigInt"],[45,18,31,16],[45,20,31,18,"base64ToBigInt"],[45,21,31,18],[45,26,31,24,"base64ToBigInt"],[45,40,31,38],[46,4,32,2,"bigIntToBase64"],[46,18,32,16],[46,20,32,18,"bigIntToBase64"],[46,21,32,18],[46,26,32,24,"bigIntToBase64"],[46,40,32,38],[47,4,33,2,"convexOrUndefinedToJson"],[47,27,33,25],[47,29,33,27,"convexOrUndefinedToJson"],[47,30,33,27],[47,35,33,33,"convexOrUndefinedToJson"],[47,58,33,56],[48,4,34,2,"convexToJson"],[48,16,34,14],[48,18,34,16,"convexToJson"],[48,19,34,16],[48,24,34,22,"convexToJson"],[48,36,34,34],[49,4,35,2,"jsonToConvex"],[49,16,35,14],[49,18,35,16,"jsonToConvex"],[49,19,35,16],[49,24,35,22,"jsonToConvex"],[49,36,35,34],[50,4,36,2,"modernBase64ToBigInt"],[50,24,36,22],[50,26,36,24,"modernBase64ToBigInt"],[50,27,36,24],[50,32,36,30,"modernBase64ToBigInt"],[50,52,36,50],[51,4,37,2,"modernBigIntToBase64"],[51,24,37,22],[51,26,37,24,"modernBigIntToBase64"],[51,27,37,24],[51,32,37,30,"modernBigIntToBase64"],[51,52,37,50],[52,4,38,2,"patchValueToJson"],[52,20,38,18],[52,22,38,20,"patchValueToJson"],[52,23,38,20],[52,28,38,26,"patchValueToJson"],[52,44,38,42],[53,4,39,2,"slowBase64ToBigInt"],[53,22,39,20],[53,24,39,22,"slowBase64ToBigInt"],[53,25,39,22],[53,30,39,28,"slowBase64ToBigInt"],[53,48,39,46],[54,4,40,2,"slowBigIntToBase64"],[54,22,40,20],[54,24,40,22,"slowBigIntToBase64"],[54,25,40,22],[54,30,40,28,"slowBigIntToBase64"],[54,48,40,46],[55,4,41,2,"stringifyValueForError"],[55,26,41,24],[55,28,41,26,"stringifyValueForError"],[55,29,41,26],[55,34,41,32,"stringifyValueForError"],[56,2,42,0],[56,3,42,1],[56,4,42,2],[57,2,43,0,"module"],[57,8,43,6],[57,9,43,7,"exports"],[57,16,43,14],[57,19,43,17,"__toCommonJS"],[57,31,43,29],[57,32,43,30,"value_exports"],[57,45,43,43],[57,46,43,44],[58,2,44,0],[58,6,44,4,"Base64"],[58,12,44,10],[58,15,44,13,"__toESM"],[58,22,44,20],[58,23,44,21,"require"],[58,30,44,28],[58,31,44,28,"_dependencyMap"],[58,45,44,28],[58,63,44,42],[58,64,44,43],[58,66,44,45],[58,67,44,46],[58,68,44,47],[59,2,45,0],[59,6,45,4,"import_common"],[59,19,45,17],[59,22,45,20,"require"],[59,29,45,27],[59,30,45,27,"_dependencyMap"],[59,44,45,27],[59,69,45,48],[59,70,45,49],[60,2,46,0],[60,6,46,6,"LITTLE_ENDIAN"],[60,19,46,19],[60,22,46,22],[60,26,46,26],[61,2,47,0],[61,6,47,6,"MIN_INT64"],[61,15,47,15],[61,18,47,18,"BigInt"],[61,24,47,24],[61,25,47,25],[61,47,47,47],[61,48,47,48],[62,2,48,0],[62,6,48,6,"MAX_INT64"],[62,15,48,15],[62,18,48,18,"BigInt"],[62,24,48,24],[62,25,48,25],[62,46,48,46],[62,47,48,47],[63,2,49,0],[63,6,49,6,"ZERO"],[63,10,49,10],[63,13,49,13,"BigInt"],[63,19,49,19],[63,20,49,20],[63,23,49,23],[63,24,49,24],[64,2,50,0],[64,6,50,6,"EIGHT"],[64,11,50,11],[64,14,50,14,"BigInt"],[64,20,50,20],[64,21,50,21],[64,24,50,24],[64,25,50,25],[65,2,51,0],[65,6,51,6,"TWOFIFTYSIX"],[65,17,51,17],[65,20,51,20,"BigInt"],[65,26,51,26],[65,27,51,27],[65,32,51,32],[65,33,51,33],[66,2,52,0],[66,11,52,9,"isSpecial"],[66,20,52,18,"isSpecial"],[66,21,52,19,"n"],[66,22,52,20],[66,24,52,22],[67,4,53,2],[67,11,53,9,"Number"],[67,17,53,15],[67,18,53,16,"isNaN"],[67,23,53,21],[67,24,53,22,"n"],[67,25,53,23],[67,26,53,24],[67,30,53,28],[67,31,53,29,"Number"],[67,37,53,35],[67,38,53,36,"isFinite"],[67,46,53,44],[67,47,53,45,"n"],[67,48,53,46],[67,49,53,47],[67,53,53,51,"Object"],[67,59,53,57],[67,60,53,58,"is"],[67,62,53,60],[67,63,53,61,"n"],[67,64,53,62],[67,66,53,64],[67,67,53,65],[67,68,53,66],[67,69,53,67],[68,2,54,0],[69,2,55,0],[69,11,55,9,"slowBigIntToBase64"],[69,29,55,27,"slowBigIntToBase64"],[69,30,55,28,"value"],[69,35,55,33],[69,37,55,35],[70,4,56,2],[70,8,56,6,"value"],[70,13,56,11],[70,16,56,14,"ZERO"],[70,20,56,18],[70,22,56,20],[71,6,57,4,"value"],[71,11,57,9],[71,15,57,13,"MIN_INT64"],[71,24,57,22],[71,27,57,25,"MIN_INT64"],[71,36,57,34],[72,4,58,2],[73,4,59,2],[73,8,59,6,"hex"],[73,11,59,9],[73,14,59,12,"value"],[73,19,59,17],[73,20,59,18,"toString"],[73,28,59,26],[73,29,59,27],[73,31,59,29],[73,32,59,30],[74,4,60,2],[74,8,60,6,"hex"],[74,11,60,9],[74,12,60,10,"length"],[74,18,60,16],[74,21,60,19],[74,22,60,20],[74,27,60,25],[74,28,60,26],[74,30,60,28,"hex"],[74,33,60,31],[74,36,60,34],[74,39,60,37],[74,42,60,40,"hex"],[74,45,60,43],[75,4,61,2],[75,8,61,8,"bytes"],[75,13,61,13],[75,16,61,16],[75,20,61,20,"Uint8Array"],[75,30,61,30],[75,31,61,31],[75,35,61,35,"ArrayBuffer"],[75,46,61,46],[75,47,61,47],[75,48,61,48],[75,49,61,49],[75,50,61,50],[76,4,62,2],[76,8,62,6,"i"],[76,9,62,7],[76,12,62,10],[76,13,62,11],[77,4,63,2],[77,9,63,7],[77,13,63,13,"hexByte"],[77,20,63,20],[77,24,63,24,"hex"],[77,27,63,27],[77,28,63,28,"match"],[77,33,63,33],[77,34,63,34],[77,41,63,41],[77,42,63,42],[77,43,63,43,"reverse"],[77,50,63,50],[77,51,63,51],[77,52,63,52],[77,54,63,54],[78,6,64,4,"bytes"],[78,11,64,9],[78,12,64,10,"set"],[78,15,64,13],[78,16,64,14],[78,17,64,15,"parseInt"],[78,25,64,23],[78,26,64,24,"hexByte"],[78,33,64,31],[78,35,64,33],[78,37,64,35],[78,38,64,36],[78,39,64,37],[78,41,64,39,"i"],[78,42,64,40],[78,44,64,42],[78,45,64,43],[79,6,65,4,"value"],[79,11,65,9],[79,16,65,14,"EIGHT"],[79,21,65,19],[80,4,66,2],[81,4,67,2],[81,11,67,9,"Base64"],[81,17,67,15],[81,18,67,16,"fromByteArray"],[81,31,67,29],[81,32,67,30,"bytes"],[81,37,67,35],[81,38,67,36],[82,2,68,0],[83,2,69,0],[83,11,69,9,"slowBase64ToBigInt"],[83,29,69,27,"slowBase64ToBigInt"],[83,30,69,28,"encoded"],[83,37,69,35],[83,39,69,37],[84,4,70,2],[84,8,70,8,"integerBytes"],[84,20,70,20],[84,23,70,23,"Base64"],[84,29,70,29],[84,30,70,30,"toByteArray"],[84,41,70,41],[84,42,70,42,"encoded"],[84,49,70,49],[84,50,70,50],[85,4,71,2],[85,8,71,6,"integerBytes"],[85,20,71,18],[85,21,71,19,"byteLength"],[85,31,71,29],[85,36,71,34],[85,37,71,35],[85,39,71,37],[86,6,72,4],[86,12,72,10],[86,16,72,14,"Error"],[86,21,72,19],[86,22,73,6],[86,34,73,18,"integerBytes"],[86,46,73,30],[86,47,73,31,"byteLength"],[86,57,73,41],[86,90,74,4],[86,91,74,5],[87,4,75,2],[88,4,76,2],[88,8,76,6,"value"],[88,13,76,11],[88,16,76,14,"ZERO"],[88,20,76,18],[89,4,77,2],[89,8,77,6,"power"],[89,13,77,11],[89,16,77,14,"ZERO"],[89,20,77,18],[90,4,78,2],[90,9,78,7],[90,13,78,13,"byte"],[90,17,78,17],[90,21,78,21,"integerBytes"],[90,33,78,33],[90,35,78,35],[91,6,79,4,"value"],[91,11,79,9],[91,15,79,13,"BigInt"],[91,21,79,19],[91,22,79,20,"byte"],[91,26,79,24],[91,27,79,25],[91,30,79,28,"TWOFIFTYSIX"],[91,41,79,39],[91,45,79,43,"power"],[91,50,79,48],[92,6,80,4,"power"],[92,11,80,9],[92,13,80,11],[93,4,81,2],[94,4,82,2],[94,8,82,6,"value"],[94,13,82,11],[94,16,82,14,"MAX_INT64"],[94,25,82,23],[94,27,82,25],[95,6,83,4,"value"],[95,11,83,9],[95,15,83,13,"MIN_INT64"],[95,24,83,22],[95,27,83,25,"MIN_INT64"],[95,36,83,34],[96,4,84,2],[97,4,85,2],[97,11,85,9,"value"],[97,16,85,14],[98,2,86,0],[99,2,87,0],[99,11,87,9,"modernBigIntToBase64"],[99,31,87,29,"modernBigIntToBase64"],[99,32,87,30,"value"],[99,37,87,35],[99,39,87,37],[100,4,88,2],[100,8,88,6,"value"],[100,13,88,11],[100,16,88,14,"MIN_INT64"],[100,25,88,23],[100,29,88,27,"MAX_INT64"],[100,38,88,36],[100,41,88,39,"value"],[100,46,88,44],[100,48,88,46],[101,6,89,4],[101,12,89,10],[101,16,89,14,"Error"],[101,21,89,19],[101,22,90,6],[101,32,90,16,"value"],[101,37,90,21],[101,82,91,4],[101,83,91,5],[102,4,92,2],[103,4,93,2],[103,8,93,8,"buffer"],[103,14,93,14],[103,17,93,17],[103,21,93,21,"ArrayBuffer"],[103,32,93,32],[103,33,93,33],[103,34,93,34],[103,35,93,35],[104,4,94,2],[104,8,94,6,"DataView"],[104,16,94,14],[104,17,94,15,"buffer"],[104,23,94,21],[104,24,94,22],[104,25,94,23,"setBigInt64"],[104,36,94,34],[104,37,94,35],[104,38,94,36],[104,40,94,38,"value"],[104,45,94,43],[104,47,94,45],[104,51,94,49],[104,52,94,50],[105,4,95,2],[105,11,95,9,"Base64"],[105,17,95,15],[105,18,95,16,"fromByteArray"],[105,31,95,29],[105,32,95,30],[105,36,95,34,"Uint8Array"],[105,46,95,44],[105,47,95,45,"buffer"],[105,53,95,51],[105,54,95,52],[105,55,95,53],[106,2,96,0],[107,2,97,0],[107,11,97,9,"modernBase64ToBigInt"],[107,31,97,29,"modernBase64ToBigInt"],[107,32,97,30,"encoded"],[107,39,97,37],[107,41,97,39],[108,4,98,2],[108,8,98,8,"integerBytes"],[108,20,98,20],[108,23,98,23,"Base64"],[108,29,98,29],[108,30,98,30,"toByteArray"],[108,41,98,41],[108,42,98,42,"encoded"],[108,49,98,49],[108,50,98,50],[109,4,99,2],[109,8,99,6,"integerBytes"],[109,20,99,18],[109,21,99,19,"byteLength"],[109,31,99,29],[109,36,99,34],[109,37,99,35],[109,39,99,37],[110,6,100,4],[110,12,100,10],[110,16,100,14,"Error"],[110,21,100,19],[110,22,101,6],[110,34,101,18,"integerBytes"],[110,46,101,30],[110,47,101,31,"byteLength"],[110,57,101,41],[110,90,102,4],[110,91,102,5],[111,4,103,2],[112,4,104,2],[112,8,104,8,"intBytesView"],[112,20,104,20],[112,23,104,23],[112,27,104,27,"DataView"],[112,35,104,35],[112,36,104,36,"integerBytes"],[112,48,104,48],[112,49,104,49,"buffer"],[112,55,104,55],[112,56,104,56],[113,4,105,2],[113,11,105,9,"intBytesView"],[113,23,105,21],[113,24,105,22,"getBigInt64"],[113,35,105,33],[113,36,105,34],[113,37,105,35],[113,39,105,37],[113,43,105,41],[113,44,105,42],[114,2,106,0],[115,2,107,0],[115,6,107,6,"bigIntToBase64"],[115,20,107,20],[115,23,107,23,"DataView"],[115,31,107,31],[115,32,107,32,"prototype"],[115,41,107,41],[115,42,107,42,"setBigInt64"],[115,53,107,53],[115,56,107,56,"modernBigIntToBase64"],[115,76,107,76],[115,79,107,79,"slowBigIntToBase64"],[115,97,107,97],[116,2,108,0],[116,6,108,6,"base64ToBigInt"],[116,20,108,20],[116,23,108,23,"DataView"],[116,31,108,31],[116,32,108,32,"prototype"],[116,41,108,41],[116,42,108,42,"getBigInt64"],[116,53,108,53],[116,56,108,56,"modernBase64ToBigInt"],[116,76,108,76],[116,79,108,79,"slowBase64ToBigInt"],[116,97,108,97],[117,2,109,0],[117,6,109,6,"MAX_IDENTIFIER_LEN"],[117,24,109,24],[117,27,109,27],[117,31,109,31],[118,2,110,0],[118,11,110,9,"validateObjectField"],[118,30,110,28,"validateObjectField"],[118,31,110,29,"k"],[118,32,110,30],[118,34,110,32],[119,4,111,2],[119,8,111,6,"k"],[119,9,111,7],[119,10,111,8,"length"],[119,16,111,14],[119,19,111,17,"MAX_IDENTIFIER_LEN"],[119,37,111,35],[119,39,111,37],[120,6,112,4],[120,12,112,10],[120,16,112,14,"Error"],[120,21,112,19],[120,22,113,6],[120,36,113,20,"k"],[120,37,113,21],[120,75,113,59,"MAX_IDENTIFIER_LEN"],[120,93,113,77],[120,96,114,4],[120,97,114,5],[121,4,115,2],[122,4,116,2],[122,8,116,6,"k"],[122,9,116,7],[122,10,116,8,"startsWith"],[122,20,116,18],[122,21,116,19],[122,24,116,22],[122,25,116,23],[122,27,116,25],[123,6,117,4],[123,12,117,10],[123,16,117,14,"Error"],[123,21,117,19],[123,22,117,20],[123,36,117,34,"k"],[123,37,117,35],[123,77,117,75],[123,78,117,76],[124,4,118,2],[125,4,119,2],[125,9,119,7],[125,13,119,11,"i"],[125,14,119,12],[125,17,119,15],[125,18,119,16],[125,20,119,18,"i"],[125,21,119,19],[125,24,119,22,"k"],[125,25,119,23],[125,26,119,24,"length"],[125,32,119,30],[125,34,119,32,"i"],[125,35,119,33],[125,39,119,37],[125,40,119,38],[125,42,119,40],[126,6,120,4],[126,10,120,10,"charCode"],[126,18,120,18],[126,21,120,21,"k"],[126,22,120,22],[126,23,120,23,"charCodeAt"],[126,33,120,33],[126,34,120,34,"i"],[126,35,120,35],[126,36,120,36],[127,6,121,4],[127,10,121,8,"charCode"],[127,18,121,16],[127,21,121,19],[127,23,121,21],[127,27,121,25,"charCode"],[127,35,121,33],[127,39,121,37],[127,42,121,40],[127,44,121,42],[128,8,122,6],[128,14,122,12],[128,18,122,16,"Error"],[128,23,122,21],[128,24,123,8],[128,38,123,22,"k"],[128,39,123,23],[128,66,123,50,"k"],[128,67,123,51],[128,68,123,52,"i"],[128,69,123,53],[128,70,123,54],[128,132,124,6],[128,133,124,7],[129,6,125,4],[130,4,126,2],[131,2,127,0],[132,2,128,0],[132,11,128,9,"jsonToConvex"],[132,23,128,21,"jsonToConvex"],[132,24,128,22,"value"],[132,29,128,27],[132,31,128,29],[133,4,129,2],[133,8,129,6,"value"],[133,13,129,11],[133,18,129,16],[133,22,129,20],[133,24,129,22],[134,6,130,4],[134,13,130,11,"value"],[134,18,130,16],[135,4,131,2],[136,4,132,2],[136,8,132,6],[136,15,132,13,"value"],[136,20,132,18],[136,25,132,23],[136,34,132,32],[136,36,132,34],[137,6,133,4],[137,13,133,11,"value"],[137,18,133,16],[138,4,134,2],[139,4,135,2],[139,8,135,6],[139,15,135,13,"value"],[139,20,135,18],[139,25,135,23],[139,33,135,31],[139,35,135,33],[140,6,136,4],[140,13,136,11,"value"],[140,18,136,16],[141,4,137,2],[142,4,138,2],[142,8,138,6],[142,15,138,13,"value"],[142,20,138,18],[142,25,138,23],[142,33,138,31],[142,35,138,33],[143,6,139,4],[143,13,139,11,"value"],[143,18,139,16],[144,4,140,2],[145,4,141,2],[145,8,141,6,"Array"],[145,13,141,11],[145,14,141,12,"isArray"],[145,21,141,19],[145,22,141,20,"value"],[145,27,141,25],[145,28,141,26],[145,30,141,28],[146,6,142,4],[146,13,142,11,"value"],[146,18,142,16],[146,19,142,17,"map"],[146,22,142,20],[146,23,142,22,"value2"],[146,29,142,28],[146,33,142,33,"jsonToConvex"],[146,45,142,45],[146,46,142,46,"value2"],[146,52,142,52],[146,53,142,53],[146,54,142,54],[147,4,143,2],[148,4,144,2],[148,8,144,6],[148,15,144,13,"value"],[148,20,144,18],[148,25,144,23],[148,33,144,31],[148,35,144,33],[149,6,145,4],[149,12,145,10],[149,16,145,14,"Error"],[149,21,145,19],[149,22,145,20],[149,44,145,42,"value"],[149,49,145,47],[149,51,145,49],[149,52,145,50],[150,4,146,2],[151,4,147,2],[151,8,147,8,"entries"],[151,15,147,15],[151,18,147,18,"Object"],[151,24,147,24],[151,25,147,25,"entries"],[151,32,147,32],[151,33,147,33,"value"],[151,38,147,38],[151,39,147,39],[152,4,148,2],[152,8,148,6,"entries"],[152,15,148,13],[152,16,148,14,"length"],[152,22,148,20],[152,27,148,25],[152,28,148,26],[152,30,148,28],[153,6,149,4],[153,10,149,10,"key"],[153,13,149,13],[153,16,149,16,"entries"],[153,23,149,23],[153,24,149,24],[153,25,149,25],[153,26,149,26],[153,27,149,27],[153,28,149,28],[153,29,149,29],[154,6,150,4],[154,10,150,8,"key"],[154,13,150,11],[154,18,150,16],[154,26,150,24],[154,28,150,26],[155,8,151,6],[155,12,151,10],[155,19,151,17,"value"],[155,24,151,22],[155,25,151,23,"$bytes"],[155,31,151,29],[155,36,151,34],[155,44,151,42],[155,46,151,44],[156,10,152,8],[156,16,152,14],[156,20,152,18,"Error"],[156,25,152,23],[156,26,152,24],[156,55,152,53,"value"],[156,60,152,58],[156,62,152,60],[156,63,152,61],[157,8,153,6],[158,8,154,6],[158,15,154,13,"Base64"],[158,21,154,19],[158,22,154,20,"toByteArray"],[158,33,154,31],[158,34,154,32,"value"],[158,39,154,37],[158,40,154,38,"$bytes"],[158,46,154,44],[158,47,154,45],[158,48,154,46,"buffer"],[158,54,154,52],[159,6,155,4],[160,6,156,4],[160,10,156,8,"key"],[160,13,156,11],[160,18,156,16],[160,28,156,26],[160,30,156,28],[161,8,157,6],[161,12,157,10],[161,19,157,17,"value"],[161,24,157,22],[161,25,157,23,"$integer"],[161,33,157,31],[161,38,157,36],[161,46,157,44],[161,48,157,46],[162,10,158,8],[162,16,158,14],[162,20,158,18,"Error"],[162,25,158,23],[162,26,158,24],[162,57,158,55,"value"],[162,62,158,60],[162,64,158,62],[162,65,158,63],[163,8,159,6],[164,8,160,6],[164,15,160,13,"base64ToBigInt"],[164,29,160,27],[164,30,160,28,"value"],[164,35,160,33],[164,36,160,34,"$integer"],[164,44,160,42],[164,45,160,43],[165,6,161,4],[166,6,162,4],[166,10,162,8,"key"],[166,13,162,11],[166,18,162,16],[166,26,162,24],[166,28,162,26],[167,8,163,6],[167,12,163,10],[167,19,163,17,"value"],[167,24,163,22],[167,25,163,23,"$float"],[167,31,163,29],[167,36,163,34],[167,44,163,42],[167,46,163,44],[168,10,164,8],[168,16,164,14],[168,20,164,18,"Error"],[168,25,164,23],[168,26,164,24],[168,55,164,53,"value"],[168,60,164,58],[168,62,164,60],[168,63,164,61],[169,8,165,6],[170,8,166,6],[170,12,166,12,"floatBytes"],[170,22,166,22],[170,25,166,25,"Base64"],[170,31,166,31],[170,32,166,32,"toByteArray"],[170,43,166,43],[170,44,166,44,"value"],[170,49,166,49],[170,50,166,50,"$float"],[170,56,166,56],[170,57,166,57],[171,8,167,6],[171,12,167,10,"floatBytes"],[171,22,167,20],[171,23,167,21,"byteLength"],[171,33,167,31],[171,38,167,36],[171,39,167,37],[171,41,167,39],[172,10,168,8],[172,16,168,14],[172,20,168,18,"Error"],[172,25,168,23],[172,26,169,10],[172,38,169,22,"floatBytes"],[172,48,169,32],[172,49,169,33,"byteLength"],[172,59,169,43],[172,90,170,8],[172,91,170,9],[173,8,171,6],[174,8,172,6],[174,12,172,12,"floatBytesView"],[174,26,172,26],[174,29,172,29],[174,33,172,33,"DataView"],[174,41,172,41],[174,42,172,42,"floatBytes"],[174,52,172,52],[174,53,172,53,"buffer"],[174,59,172,59],[174,60,172,60],[175,8,173,6],[175,12,173,12,"float"],[175,17,173,17],[175,20,173,20,"floatBytesView"],[175,34,173,34],[175,35,173,35,"getFloat64"],[175,45,173,45],[175,46,173,46],[175,47,173,47],[175,49,173,49,"LITTLE_ENDIAN"],[175,62,173,62],[175,63,173,63],[176,8,174,6],[176,12,174,10],[176,13,174,11,"isSpecial"],[176,22,174,20],[176,23,174,21,"float"],[176,28,174,26],[176,29,174,27],[176,31,174,29],[177,10,175,8],[177,16,175,14],[177,20,175,18,"Error"],[177,25,175,23],[177,26,175,24],[177,35,175,33,"float"],[177,40,175,38],[177,72,175,70],[177,73,175,71],[178,8,176,6],[179,8,177,6],[179,15,177,13,"float"],[179,20,177,18],[180,6,178,4],[181,6,179,4],[181,10,179,8,"key"],[181,13,179,11],[181,18,179,16],[181,24,179,22],[181,26,179,24],[182,8,180,6],[182,14,180,12],[182,18,180,16,"Error"],[182,23,180,21],[182,24,181,8],[182,87,182,6],[182,88,182,7],[183,6,183,4],[184,6,184,4],[184,10,184,8,"key"],[184,13,184,11],[184,18,184,16],[184,24,184,22],[184,26,184,24],[185,8,185,6],[185,14,185,12],[185,18,185,16,"Error"],[185,23,185,21],[185,24,186,8],[185,87,187,6],[185,88,187,7],[186,6,188,4],[187,4,189,2],[188,4,190,2],[188,8,190,8,"out"],[188,11,190,11],[188,14,190,14],[188,15,190,15],[188,16,190,16],[189,4,191,2],[189,13,191,2,"_ref"],[189,17,191,2],[189,21,191,23,"Object"],[189,27,191,29],[189,28,191,30,"entries"],[189,35,191,37],[189,36,191,38,"value"],[189,41,191,43],[189,42,191,44],[189,44,191,46],[190,6,191,46],[190,10,191,46,"_ref2"],[190,15,191,46],[190,18,191,46,"_slicedToArray"],[190,32,191,46],[190,33,191,46,"_ref"],[190,37,191,46],[191,6,191,46],[191,10,191,14,"k"],[191,11,191,15],[191,14,191,15,"_ref2"],[191,19,191,15],[192,6,191,15],[192,10,191,17,"v"],[192,11,191,18],[192,14,191,18,"_ref2"],[192,19,191,18],[193,6,192,4,"validateObjectField"],[193,25,192,23],[193,26,192,24,"k"],[193,27,192,25],[193,28,192,26],[194,6,193,4,"out"],[194,9,193,7],[194,10,193,8,"k"],[194,11,193,9],[194,12,193,10],[194,15,193,13,"jsonToConvex"],[194,27,193,25],[194,28,193,26,"v"],[194,29,193,27],[194,30,193,28],[195,4,194,2],[196,4,195,2],[196,11,195,9,"out"],[196,14,195,12],[197,2,196,0],[198,2,197,0],[198,11,197,9,"stringifyValueForError"],[198,33,197,31,"stringifyValueForError"],[198,34,197,32,"value"],[198,39,197,37],[198,41,197,39],[199,4,198,2],[199,11,198,9,"JSON"],[199,15,198,13],[199,16,198,14,"stringify"],[199,25,198,23],[199,26,198,24,"value"],[199,31,198,29],[199,33,198,31],[199,34,198,32,"_key"],[199,38,198,36],[199,40,198,38,"value2"],[199,46,198,44],[199,51,198,49],[200,6,199,4],[200,10,199,8,"value2"],[200,16,199,14],[200,21,199,19],[200,26,199,24],[200,27,199,25],[200,29,199,27],[201,8,200,6],[201,15,200,13],[201,26,200,24],[202,6,201,4],[203,6,202,4],[203,10,202,8],[203,17,202,15,"value2"],[203,23,202,21],[203,28,202,26],[203,36,202,34],[203,38,202,36],[204,8,203,6],[204,15,203,13],[204,18,203,16,"value2"],[204,24,203,22],[204,25,203,23,"toString"],[204,33,203,31],[204,34,203,32],[204,35,203,33],[204,38,203,36],[205,6,204,4],[206,6,205,4],[206,13,205,11,"value2"],[206,19,205,17],[207,4,206,2],[207,5,206,3],[207,6,206,4],[208,2,207,0],[209,2,208,0],[209,11,208,9,"convexToJsonInternal"],[209,31,208,29,"convexToJsonInternal"],[209,32,208,30,"value"],[209,37,208,35],[209,39,208,37,"originalValue"],[209,52,208,50],[209,54,208,52,"context"],[209,61,208,59],[209,63,208,61,"includeTopLevelUndefined"],[209,87,208,85],[209,89,208,87],[210,4,209,2],[210,8,209,6,"value"],[210,13,209,11],[210,18,209,16],[210,23,209,21],[210,24,209,22],[210,26,209,24],[211,6,210,4],[211,10,210,10,"contextText"],[211,21,210,21],[211,24,210,24,"context"],[211,31,210,31],[211,35,210,35],[211,56,210,56,"context"],[211,63,210,63],[211,86,210,86,"stringifyValueForError"],[211,108,210,108],[211,109,211,6,"originalValue"],[211,122,212,4],[211,123,212,5],[211,126,212,8],[212,6,213,4],[212,12,213,10],[212,16,213,14,"Error"],[212,21,213,19],[212,22,214,6],[212,62,214,46,"contextText"],[212,73,214,57],[212,158,215,4],[212,159,215,5],[213,4,216,2],[214,4,217,2],[214,8,217,6,"value"],[214,13,217,11],[214,18,217,16],[214,22,217,20],[214,24,217,22],[215,6,218,4],[215,13,218,11,"value"],[215,18,218,16],[216,4,219,2],[217,4,220,2],[217,8,220,6],[217,15,220,13,"value"],[217,20,220,18],[217,25,220,23],[217,33,220,31],[217,35,220,33],[218,6,221,4],[218,10,221,8,"value"],[218,15,221,13],[218,18,221,16,"MIN_INT64"],[218,27,221,25],[218,31,221,29,"MAX_INT64"],[218,40,221,38],[218,43,221,41,"value"],[218,48,221,46],[218,50,221,48],[219,8,222,6],[219,14,222,12],[219,18,222,16,"Error"],[219,23,222,21],[219,24,223,8],[219,34,223,18,"value"],[219,39,223,23],[219,84,224,6],[219,85,224,7],[220,6,225,4],[221,6,226,4],[221,13,226,11],[222,8,226,13,"$integer"],[222,16,226,21],[222,18,226,23,"bigIntToBase64"],[222,32,226,37],[222,33,226,38,"value"],[222,38,226,43],[223,6,226,45],[223,7,226,46],[224,4,227,2],[225,4,228,2],[225,8,228,6],[225,15,228,13,"value"],[225,20,228,18],[225,25,228,23],[225,33,228,31],[225,35,228,33],[226,6,229,4],[226,10,229,8,"isSpecial"],[226,19,229,17],[226,20,229,18,"value"],[226,25,229,23],[226,26,229,24],[226,28,229,26],[227,8,230,6],[227,12,230,12,"buffer"],[227,18,230,18],[227,21,230,21],[227,25,230,25,"ArrayBuffer"],[227,36,230,36],[227,37,230,37],[227,38,230,38],[227,39,230,39],[228,8,231,6],[228,12,231,10,"DataView"],[228,20,231,18],[228,21,231,19,"buffer"],[228,27,231,25],[228,28,231,26],[228,29,231,27,"setFloat64"],[228,39,231,37],[228,40,231,38],[228,41,231,39],[228,43,231,41,"value"],[228,48,231,46],[228,50,231,48,"LITTLE_ENDIAN"],[228,63,231,61],[228,64,231,62],[229,8,232,6],[229,15,232,13],[230,10,232,15,"$float"],[230,16,232,21],[230,18,232,23,"Base64"],[230,24,232,29],[230,25,232,30,"fromByteArray"],[230,38,232,43],[230,39,232,44],[230,43,232,48,"Uint8Array"],[230,53,232,58],[230,54,232,59,"buffer"],[230,60,232,65],[230,61,232,66],[231,8,232,68],[231,9,232,69],[232,6,233,4],[232,7,233,5],[232,13,233,11],[233,8,234,6],[233,15,234,13,"value"],[233,20,234,18],[234,6,235,4],[235,4,236,2],[236,4,237,2],[236,8,237,6],[236,15,237,13,"value"],[236,20,237,18],[236,25,237,23],[236,34,237,32],[236,36,237,34],[237,6,238,4],[237,13,238,11,"value"],[237,18,238,16],[238,4,239,2],[239,4,240,2],[239,8,240,6],[239,15,240,13,"value"],[239,20,240,18],[239,25,240,23],[239,33,240,31],[239,35,240,33],[240,6,241,4],[240,13,241,11,"value"],[240,18,241,16],[241,4,242,2],[242,4,243,2],[242,8,243,6,"value"],[242,13,243,11],[242,25,243,23,"ArrayBuffer"],[242,36,243,34],[242,38,243,36],[243,6,244,4],[243,13,244,11],[244,8,244,13,"$bytes"],[244,14,244,19],[244,16,244,21,"Base64"],[244,22,244,27],[244,23,244,28,"fromByteArray"],[244,36,244,41],[244,37,244,42],[244,41,244,46,"Uint8Array"],[244,51,244,56],[244,52,244,57,"value"],[244,57,244,62],[244,58,244,63],[245,6,244,65],[245,7,244,66],[246,4,245,2],[247,4,246,2],[247,8,246,6,"Array"],[247,13,246,11],[247,14,246,12,"isArray"],[247,21,246,19],[247,22,246,20,"value"],[247,27,246,25],[247,28,246,26],[247,30,246,28],[248,6,247,4],[248,13,247,11,"value"],[248,18,247,16],[248,19,247,17,"map"],[248,22,247,20],[248,23,248,6],[248,24,248,7,"value2"],[248,30,248,13],[248,32,248,15,"i"],[248,33,248,16],[248,38,248,21,"convexToJsonInternal"],[248,58,248,41],[248,59,248,42,"value2"],[248,65,248,48],[248,67,248,50,"originalValue"],[248,80,248,63],[248,82,248,65,"context"],[248,89,248,72],[248,92,248,75],[248,96,248,79,"i"],[248,97,248,80],[248,100,248,83],[248,102,248,85],[248,107,248,90],[248,108,249,4],[248,109,249,5],[249,4,250,2],[250,4,251,2],[250,8,251,6,"value"],[250,13,251,11],[250,25,251,23,"Set"],[250,28,251,26],[250,30,251,28],[251,6,252,4],[251,12,252,10],[251,16,252,14,"Error"],[251,21,252,19],[251,22,253,6,"errorMessageForUnsupportedType"],[251,52,253,36],[251,53,253,37,"context"],[251,60,253,44],[251,62,253,46],[251,67,253,51],[251,69,253,53],[251,70,253,54],[251,73,253,57,"value"],[251,78,253,62],[251,79,253,63],[251,81,253,65,"originalValue"],[251,94,253,78],[251,95,254,4],[251,96,254,5],[252,4,255,2],[253,4,256,2],[253,8,256,6,"value"],[253,13,256,11],[253,25,256,23,"Map"],[253,28,256,26],[253,30,256,28],[254,6,257,4],[254,12,257,10],[254,16,257,14,"Error"],[254,21,257,19],[254,22,258,6,"errorMessageForUnsupportedType"],[254,52,258,36],[254,53,258,37,"context"],[254,60,258,44],[254,62,258,46],[254,67,258,51],[254,69,258,53],[254,70,258,54],[254,73,258,57,"value"],[254,78,258,62],[254,79,258,63],[254,81,258,65,"originalValue"],[254,94,258,78],[254,95,259,4],[254,96,259,5],[255,4,260,2],[256,4,261,2],[256,8,261,6],[256,9,261,7],[256,10,261,8],[256,11,261,9],[256,13,261,11,"import_common"],[256,26,261,24],[256,27,261,25,"isSimpleObject"],[256,41,261,39],[256,43,261,41,"value"],[256,48,261,46],[256,49,261,47],[256,51,261,49],[257,6,262,4],[257,10,262,10,"theType"],[257,17,262,17],[257,20,262,20,"value"],[257,25,262,25],[257,27,262,27,"constructor"],[257,38,262,38],[257,40,262,40,"name"],[257,44,262,44],[258,6,263,4],[258,10,263,10,"typeName"],[258,18,263,18],[258,21,263,21,"theType"],[258,28,263,28],[258,31,263,31],[258,34,263,34,"theType"],[258,41,263,41],[258,44,263,44],[258,47,263,47],[258,49,263,49],[259,6,264,4],[259,12,264,10],[259,16,264,14,"Error"],[259,21,264,19],[259,22,265,6,"errorMessageForUnsupportedType"],[259,52,265,36],[259,53,265,37,"context"],[259,60,265,44],[259,62,265,46,"typeName"],[259,70,265,54],[259,72,265,56,"value"],[259,77,265,61],[259,79,265,63,"originalValue"],[259,92,265,76],[259,93,266,4],[259,94,266,5],[260,4,267,2],[261,4,268,2],[261,8,268,8,"out"],[261,11,268,11],[261,14,268,14],[261,15,268,15],[261,16,268,16],[262,4,269,2],[262,8,269,8,"entries"],[262,15,269,15],[262,18,269,18,"Object"],[262,24,269,24],[262,25,269,25,"entries"],[262,32,269,32],[262,33,269,33,"value"],[262,38,269,38],[262,39,269,39],[263,4,270,2,"entries"],[263,11,270,9],[263,12,270,10,"sort"],[263,16,270,14],[263,17,270,15],[263,18,270,15,"_ref3"],[263,23,270,15],[263,25,270,15,"_ref4"],[263,30,270,15],[264,6,270,15],[264,10,270,15,"_ref5"],[264,15,270,15],[264,18,270,15,"_slicedToArray"],[264,32,270,15],[264,33,270,15,"_ref3"],[264,38,270,15],[265,8,270,17,"k1"],[265,10,270,19],[265,13,270,19,"_ref5"],[265,18,270,19],[266,8,270,21,"_v1"],[266,11,270,24],[266,14,270,24,"_ref5"],[266,19,270,24],[267,6,270,24],[267,10,270,24,"_ref6"],[267,15,270,24],[267,18,270,24,"_slicedToArray"],[267,32,270,24],[267,33,270,24,"_ref4"],[267,38,270,24],[268,8,270,28,"k2"],[268,10,270,30],[268,13,270,30,"_ref6"],[268,18,270,30],[269,8,270,32,"_v2"],[269,11,270,35],[269,14,270,35,"_ref6"],[269,19,270,35],[270,6,270,35],[270,13,270,41,"k1"],[270,15,270,43],[270,20,270,48,"k2"],[270,22,270,50],[270,25,270,53],[270,26,270,54],[270,29,270,57,"k1"],[270,31,270,59],[270,34,270,62,"k2"],[270,36,270,64],[270,39,270,67],[270,40,270,68],[270,41,270,69],[270,44,270,72],[270,45,270,73],[271,4,270,73],[271,6,270,74],[272,4,271,2],[272,13,271,2,"_ref7"],[272,18,271,2],[272,22,271,23,"entries"],[272,29,271,30],[272,31,271,32],[273,6,271,32],[273,10,271,32,"_ref8"],[273,15,271,32],[273,18,271,32,"_slicedToArray"],[273,32,271,32],[273,33,271,32,"_ref7"],[273,38,271,32],[274,6,271,32],[274,10,271,14,"k"],[274,11,271,15],[274,14,271,15,"_ref8"],[274,19,271,15],[275,6,271,15],[275,10,271,17,"v"],[275,11,271,18],[275,14,271,18,"_ref8"],[275,19,271,18],[276,6,272,4],[276,10,272,8,"v"],[276,11,272,9],[276,16,272,14],[276,21,272,19],[276,22,272,20],[276,24,272,22],[277,8,273,6,"validateObjectField"],[277,27,273,25],[277,28,273,26,"k"],[277,29,273,27],[277,30,273,28],[278,8,274,6,"out"],[278,11,274,9],[278,12,274,10,"k"],[278,13,274,11],[278,14,274,12],[278,17,274,15,"convexToJsonInternal"],[278,37,274,35],[278,38,274,36,"v"],[278,39,274,37],[278,41,274,39,"originalValue"],[278,54,274,52],[278,56,274,54,"context"],[278,63,274,61],[278,66,274,64],[278,70,274,68,"k"],[278,71,274,69],[278,73,274,71],[278,75,274,73],[278,80,274,78],[278,81,274,79],[279,6,275,4],[279,7,275,5],[279,13,275,11],[279,17,275,15,"includeTopLevelUndefined"],[279,41,275,39],[279,43,275,41],[280,8,276,6,"validateObjectField"],[280,27,276,25],[280,28,276,26,"k"],[280,29,276,27],[280,30,276,28],[281,8,277,6,"out"],[281,11,277,9],[281,12,277,10,"k"],[281,13,277,11],[281,14,277,12],[281,17,277,15,"convexOrUndefinedToJsonInternal"],[281,48,277,46],[281,49,278,8,"v"],[281,50,278,9],[281,52,279,8,"originalValue"],[281,65,279,21],[281,67,280,8,"context"],[281,74,280,15],[281,77,280,18],[281,81,280,22,"k"],[281,82,280,23],[281,84,281,6],[281,85,281,7],[282,6,282,4],[283,4,283,2],[284,4,284,2],[284,11,284,9,"out"],[284,14,284,12],[285,2,285,0],[286,2,286,0],[286,11,286,9,"errorMessageForUnsupportedType"],[286,41,286,39,"errorMessageForUnsupportedType"],[286,42,286,40,"context"],[286,49,286,47],[286,51,286,49,"typeName"],[286,59,286,57],[286,61,286,59,"value"],[286,66,286,64],[286,68,286,66,"originalValue"],[286,81,286,79],[286,83,286,81],[287,4,287,2],[287,8,287,6,"context"],[287,15,287,13],[287,17,287,15],[288,6,288,4],[288,13,288,11],[288,16,288,14,"typeName"],[288,24,288,22],[288,27,288,25,"stringifyValueForError"],[288,49,288,47],[288,50,289,6,"value"],[288,55,290,4],[288,56,290,5],[288,108,290,57,"context"],[288,115,290,64],[288,138,290,87,"stringifyValueForError"],[288,160,290,109],[288,161,291,6,"originalValue"],[288,174,292,4],[288,175,292,5],[288,261,292,91],[289,4,293,2],[289,5,293,3],[289,11,293,9],[290,6,294,4],[290,13,294,11],[290,16,294,14,"typeName"],[290,24,294,22],[290,27,294,25,"stringifyValueForError"],[290,49,294,47],[290,50,295,6,"value"],[290,55,296,4],[290,56,296,5],[290,90,296,39],[291,4,297,2],[292,2,298,0],[293,2,299,0],[293,11,299,9,"convexOrUndefinedToJsonInternal"],[293,42,299,40,"convexOrUndefinedToJsonInternal"],[293,43,299,41,"value"],[293,48,299,46],[293,50,299,48,"originalValue"],[293,63,299,61],[293,65,299,63,"context"],[293,72,299,70],[293,74,299,72],[294,4,300,2],[294,8,300,6,"value"],[294,13,300,11],[294,18,300,16],[294,23,300,21],[294,24,300,22],[294,26,300,24],[295,6,301,4],[295,13,301,11],[296,8,301,13,"$undefined"],[296,18,301,23],[296,20,301,25],[297,6,301,30],[297,7,301,31],[298,4,302,2],[298,5,302,3],[298,11,302,9],[299,6,303,4],[299,10,303,8,"originalValue"],[299,23,303,21],[299,28,303,26],[299,33,303,31],[299,34,303,32],[299,36,303,34],[300,8,304,6],[300,14,304,12],[300,18,304,16,"Error"],[300,23,304,21],[300,24,305,8],[300,63,305,47,"stringifyValueForError"],[300,85,305,69],[300,86,306,10,"value"],[300,91,307,8],[300,92,307,9],[300,126,308,6],[300,127,308,7],[301,6,309,4],[302,6,310,4],[302,13,310,11,"convexToJsonInternal"],[302,33,310,31],[302,34,310,32,"value"],[302,39,310,37],[302,41,310,39,"originalValue"],[302,54,310,52],[302,56,310,54,"context"],[302,63,310,61],[302,65,310,63],[302,70,310,68],[302,71,310,69],[303,4,311,2],[304,2,312,0],[305,2,313,0],[305,11,313,9,"convexToJson"],[305,23,313,21,"convexToJson"],[305,24,313,22,"value"],[305,29,313,27],[305,31,313,29],[306,4,314,2],[306,11,314,9,"convexToJsonInternal"],[306,31,314,29],[306,32,314,30,"value"],[306,37,314,35],[306,39,314,37,"value"],[306,44,314,42],[306,46,314,44],[306,48,314,46],[306,50,314,48],[306,55,314,53],[306,56,314,54],[307,2,315,0],[308,2,316,0],[308,11,316,9,"convexOrUndefinedToJson"],[308,34,316,32,"convexOrUndefinedToJson"],[308,35,316,33,"value"],[308,40,316,38],[308,42,316,40],[309,4,317,2],[309,11,317,9,"convexOrUndefinedToJsonInternal"],[309,42,317,40],[309,43,317,41,"value"],[309,48,317,46],[309,50,317,48,"value"],[309,55,317,53],[309,57,317,55],[309,59,317,57],[309,60,317,58],[310,2,318,0],[311,2,319,0],[311,11,319,9,"patchValueToJson"],[311,27,319,25,"patchValueToJson"],[311,28,319,26,"value"],[311,33,319,31],[311,35,319,33],[312,4,320,2],[312,11,320,9,"convexToJsonInternal"],[312,31,320,29],[312,32,320,30,"value"],[312,37,320,35],[312,39,320,37,"value"],[312,44,320,42],[312,46,320,44],[312,48,320,46],[312,50,320,48],[312,54,320,52],[312,55,320,53],[313,2,321,0],[314,0,321,1],[314,3]],"functionMap":{"names":["<global>","__export","__copyProps","__defProp$argument_2.get","__toESM","__toCommonJS","__export$argument_1.base64ToBigInt","__export$argument_1.bigIntToBase64","__export$argument_1.convexOrUndefinedToJson","__export$argument_1.convexToJson","__export$argument_1.jsonToConvex","__export$argument_1.modernBase64ToBigInt","__export$argument_1.modernBigIntToBase64","__export$argument_1.patchValueToJson","__export$argument_1.slowBase64ToBigInt","__export$argument_1.slowBigIntToBase64","__export$argument_1.stringifyValueForError","isSpecial","slowBigIntToBase64","slowBase64ToBigInt","modernBigIntToBase64","modernBase64ToBigInt","validateObjectField","jsonToConvex","map$argument_0","stringifyValueForError","JSON.stringify$argument_1","convexToJsonInternal","entries.sort$argument_0","errorMessageForUnsupportedType","convexOrUndefinedToJsonInternal","convexToJson","convexOrUndefinedToJson","patchValueToJson"],"mappings":"AAA;eCO;CDG;kBEC;kCCI,eD;CFG;cIC;EJO;mBKC,uEL;kBMG,oBN;kBOC,oBP;2BQC,6BR;gBSC,kBT;gBUC,kBV;wBWC,0BX;wBYC,0BZ;oBaC,sBb;sBcC,wBd;sBeC,wBf;0BgBC,4BhB;AiBW;CjBE;AkBC;ClBa;AmBC;CnBiB;AoBC;CpBS;AqBC;CrBS;AsBI;CtBiB;AuBC;qBCc,gCD;CvBsD;AyBC;+BCC;GDQ;CzBC;A2BC;MHwC,qFG;eCsB,0DD;C3Be;A6BC;C7BY;A8BC;C9Ba;A+BC;C/BE;AgCC;ChCE;AiCC;CjCE"},"hasCjsExports":true},"type":"js/module"}]}