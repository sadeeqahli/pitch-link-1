{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/readOnlyError","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"tW9vjPH6bEH6zBBMaoehmzXhDcQ=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"../../index.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":26,"column":15,"index":1233},"end":{"line":26,"column":40,"index":1258}}],"key":"Ldfv0VkuZXZHMQUEDRHnEWNlmGQ=","exportNames":["*"],"imports":1}},{"name":"../../values/index.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":27,"column":20,"index":1280},"end":{"line":27,"column":52,"index":1312}}],"key":"5ivjK8omhTrYdxQY3jKyNZKxy5Y=","exportNames":["*"],"imports":1}},{"name":"../logging.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":28,"column":21,"index":1335},"end":{"line":28,"column":45,"index":1359}}],"key":"2x2OYYf+qoAPlfVSOoxcww6xuEM=","exportNames":["*"],"imports":1}},{"name":"./local_state.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":29,"column":25,"index":1386},"end":{"line":29,"column":52,"index":1413}}],"key":"D0ydXWwAL9HOS1oShxY/CnSTB6A=","exportNames":["*"],"imports":1}},{"name":"./request_manager.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":30,"column":29,"index":1444},"end":{"line":30,"column":60,"index":1475}}],"key":"PTYgPvbKQf8j/Sojem4b0FgLvQM=","exportNames":["*"],"imports":1}},{"name":"./optimistic_updates_impl.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":31,"column":37,"index":1514},"end":{"line":31,"column":76,"index":1553}}],"key":"EnbgLFVYVq5FbnJZGP2XVKYdnkk=","exportNames":["*"],"imports":1}},{"name":"./remote_query_set.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":32,"column":30,"index":1585},"end":{"line":32,"column":62,"index":1617}}],"key":"+xl2s8mbqY2eoCtq1Rz1v7EJmj8=","exportNames":["*"],"imports":1}},{"name":"./udf_path_utils.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":33,"column":28,"index":1647},"end":{"line":33,"column":58,"index":1677}}],"key":"OUJAHwZ/Ugg0EfHJh6uxlRX1c1Q=","exportNames":["*"],"imports":1}},{"name":"./web_socket_manager.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":34,"column":32,"index":1711},"end":{"line":34,"column":66,"index":1745}}],"key":"LaTMPyIOY9RcevZJSvcSDh21eCg=","exportNames":["*"],"imports":1}},{"name":"./session.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":35,"column":21,"index":1768},"end":{"line":35,"column":44,"index":1791}}],"key":"cn1ZSbdgFVTXy2CF2sD0mPN1bo0=","exportNames":["*"],"imports":1}},{"name":"./authentication_manager.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":36,"column":36,"index":1829},"end":{"line":36,"column":74,"index":1867}}],"key":"J+cjjxd6e/HFngqZps6TRkJW/+M=","exportNames":["*"],"imports":1}},{"name":"./metrics.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":37,"column":21,"index":1890},"end":{"line":37,"column":44,"index":1913}}],"key":"MANNbPygYTDNHP+qJKPGwDUXtPU=","exportNames":["*"],"imports":1}},{"name":"../../common/index.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":38,"column":20,"index":1935},"end":{"line":38,"column":52,"index":1967}}],"key":"aK60MpmAu47xBjy45e0WxVTm/6E=","exportNames":["*"],"imports":1}},{"name":"../../values/errors.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":39,"column":20,"index":1989},"end":{"line":39,"column":53,"index":2022}}],"key":"Jf2JEhYeU7A5s4GQfb7FGCgAyEQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _asyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\").default;\n  var _readOnlyError = require(_dependencyMap[1], \"@babel/runtime/helpers/readOnlyError\").default;\n  var _slicedToArray = require(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\").default;\n  var _classCallCheck = require(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\").default;\n  var _createClass = require(_dependencyMap[4], \"@babel/runtime/helpers/createClass\").default;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value\n  }) : obj[key] = value;\n  var __export = (target, all) => {\n    for (var name in all) __defProp(target, name, {\n      get: all[name],\n      enumerable: true\n    });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      var _loop = function (key) {\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n          get: () => from[key],\n          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n      };\n      for (var key of __getOwnPropNames(from)) {\n        _loop(key);\n      }\n    }\n    return to;\n  };\n  var __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n    value: true\n  }), mod);\n  var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  var client_exports = {};\n  __export(client_exports, {\n    BaseConvexClient: () => BaseConvexClient\n  });\n  module.exports = __toCommonJS(client_exports);\n  var import__ = require(_dependencyMap[5], \"../../index.js\");\n  var import_values = require(_dependencyMap[6], \"../../values/index.js\");\n  var import_logging = require(_dependencyMap[7], \"../logging.js\");\n  var import_local_state = require(_dependencyMap[8], \"./local_state.js\");\n  var import_request_manager = require(_dependencyMap[9], \"./request_manager.js\");\n  var import_optimistic_updates_impl = require(_dependencyMap[10], \"./optimistic_updates_impl.js\");\n  var import_remote_query_set = require(_dependencyMap[11], \"./remote_query_set.js\");\n  var import_udf_path_utils = require(_dependencyMap[12], \"./udf_path_utils.js\");\n  var import_web_socket_manager = require(_dependencyMap[13], \"./web_socket_manager.js\");\n  var import_session = require(_dependencyMap[14], \"./session.js\");\n  var import_authentication_manager = require(_dependencyMap[15], \"./authentication_manager.js\");\n  var import_metrics = require(_dependencyMap[16], \"./metrics.js\");\n  var import_common = require(_dependencyMap[17], \"../../common/index.js\");\n  var import_errors = require(_dependencyMap[18], \"../../values/errors.js\");\n  var BaseConvexClient = /*#__PURE__*/function () {\n    /**\n     * @param address - The url of your Convex deployment, often provided\n     * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n     * @param onTransition - A callback receiving an array of query tokens\n     * corresponding to query results that have changed -- additional handlers\n     * can be added via `addOnTransitionHandler`.\n     * @param options - See {@link BaseConvexClientOptions} for a full description.\n     */\n    function BaseConvexClient(address, onTransition, options) {\n      _classCallCheck(this, BaseConvexClient);\n      __publicField(this, \"address\");\n      __publicField(this, \"state\");\n      __publicField(this, \"requestManager\");\n      __publicField(this, \"webSocketManager\");\n      __publicField(this, \"authenticationManager\");\n      __publicField(this, \"remoteQuerySet\");\n      __publicField(this, \"optimisticQueryResults\");\n      __publicField(this, \"_transitionHandlerCounter\", 0);\n      __publicField(this, \"_nextRequestId\");\n      __publicField(this, \"_onTransitionFns\", /* @__PURE__ */new Map());\n      __publicField(this, \"_sessionId\");\n      __publicField(this, \"firstMessageReceived\", false);\n      __publicField(this, \"debug\");\n      __publicField(this, \"logger\");\n      __publicField(this, \"maxObservedTimestamp\");\n      __publicField(this, \"connectionStateSubscribers\", /* @__PURE__ */new Map());\n      __publicField(this, \"nextConnectionStateSubscriberId\", 0);\n      __publicField(this, \"_lastPublishedConnectionState\");\n      /**\n       * Call this whenever the connection state may have changed in a way that could\n       * require publishing it. Schedules a possibly update.\n       */\n      __publicField(this, \"markConnectionStateDirty\", () => {\n        void Promise.resolve().then(() => {\n          var curConnectionState = this.connectionState();\n          if (JSON.stringify(curConnectionState) !== JSON.stringify(this._lastPublishedConnectionState)) {\n            this._lastPublishedConnectionState = curConnectionState;\n            for (var cb of this.connectionStateSubscribers.values()) {\n              cb(curConnectionState);\n            }\n          }\n        });\n      });\n      // Instance property so that `mark()` doesn't need to be called as a method.\n      __publicField(this, \"mark\", name => {\n        if (this.debug) {\n          (0, import_metrics.mark)(name, this.sessionId);\n        }\n      });\n      if (typeof address === \"object\") {\n        throw new Error(\"Passing a ClientConfig object is no longer supported. Pass the URL of the Convex deployment as a string directly.\");\n      }\n      if (options?.skipConvexDeploymentUrlCheck !== true) {\n        (0, import_common.validateDeploymentUrl)(address);\n      }\n      options = {\n        ...options\n      };\n      var authRefreshTokenLeewaySeconds = options.authRefreshTokenLeewaySeconds ?? 2;\n      var webSocketConstructor = options.webSocketConstructor;\n      if (!webSocketConstructor && typeof WebSocket === \"undefined\") {\n        throw new Error(\"No WebSocket global variable defined! To use Convex in an environment without WebSocket try the HTTP client: https://docs.convex.dev/api/classes/browser.ConvexHttpClient\");\n      }\n      webSocketConstructor = webSocketConstructor || WebSocket;\n      this.debug = options.reportDebugInfoToConvex ?? false;\n      this.address = address;\n      this.logger = options.logger === false ? (0, import_logging.instantiateNoopLogger)({\n        verbose: options.verbose ?? false\n      }) : options.logger !== true && options.logger ? options.logger : (0, import_logging.instantiateDefaultLogger)({\n        verbose: options.verbose ?? false\n      });\n      var i = address.search(\"://\");\n      if (i === -1) {\n        throw new Error(\"Provided address was not an absolute URL.\");\n      }\n      var origin = address.substring(i + 3);\n      var protocol = address.substring(0, i);\n      var wsProtocol;\n      if (protocol === \"http\") {\n        wsProtocol = \"ws\";\n      } else if (protocol === \"https\") {\n        wsProtocol = \"wss\";\n      } else {\n        throw new Error(`Unknown parent protocol ${protocol}`);\n      }\n      var wsUri = `${wsProtocol}://${origin}/api/${import__.version}/sync`;\n      this.state = new import_local_state.LocalSyncState();\n      this.remoteQuerySet = new import_remote_query_set.RemoteQuerySet(queryId => this.state.queryPath(queryId), this.logger);\n      this.requestManager = new import_request_manager.RequestManager(this.logger, this.markConnectionStateDirty);\n      var pauseSocket = () => {\n        this.webSocketManager.pause();\n        this.state.pause();\n      };\n      this.authenticationManager = new import_authentication_manager.AuthenticationManager(this.state, {\n        authenticate: token => {\n          var message = this.state.setAuth(token);\n          this.webSocketManager.sendMessage(message);\n          return message.baseVersion;\n        },\n        stopSocket: () => this.webSocketManager.stop(),\n        tryRestartSocket: () => this.webSocketManager.tryRestart(),\n        pauseSocket,\n        resumeSocket: () => this.webSocketManager.resume(),\n        clearAuth: () => {\n          this.clearAuth();\n        }\n      }, {\n        logger: this.logger,\n        refreshTokenLeewaySeconds: authRefreshTokenLeewaySeconds\n      });\n      this.optimisticQueryResults = new import_optimistic_updates_impl.OptimisticQueryResults();\n      this.addOnTransitionHandler(transition => {\n        onTransition(transition.queries.map(q => q.token));\n      });\n      this._nextRequestId = 0;\n      this._sessionId = (0, import_session.newSessionId)();\n      var _options = options,\n        unsavedChangesWarning = _options.unsavedChangesWarning;\n      if (typeof window === \"undefined\" || typeof window.addEventListener === \"undefined\") {\n        if (unsavedChangesWarning === true) {\n          throw new Error(\"unsavedChangesWarning requested, but window.addEventListener not found! Remove {unsavedChangesWarning: true} from Convex client options.\");\n        }\n      } else if (unsavedChangesWarning !== false) {\n        window.addEventListener(\"beforeunload\", e => {\n          if (this.requestManager.hasIncompleteRequests()) {\n            e.preventDefault();\n            var confirmationMessage = \"Are you sure you want to leave? Your changes may not be saved.\";\n            (e || window.event).returnValue = confirmationMessage;\n            return confirmationMessage;\n          }\n        });\n      }\n      this.webSocketManager = new import_web_socket_manager.WebSocketManager(wsUri, {\n        onOpen: reconnectMetadata => {\n          this.mark(\"convexWebSocketOpen\");\n          this.webSocketManager.sendMessage({\n            ...reconnectMetadata,\n            type: \"Connect\",\n            sessionId: this._sessionId,\n            maxObservedTimestamp: this.maxObservedTimestamp\n          });\n          var oldRemoteQueryResults = new Set(this.remoteQuerySet.remoteQueryResults().keys());\n          this.remoteQuerySet = new import_remote_query_set.RemoteQuerySet(queryId => this.state.queryPath(queryId), this.logger);\n          var _this$state$restart = this.state.restart(oldRemoteQueryResults),\n            _this$state$restart2 = _slicedToArray(_this$state$restart, 2),\n            querySetModification = _this$state$restart2[0],\n            authModification = _this$state$restart2[1];\n          if (authModification) {\n            this.webSocketManager.sendMessage(authModification);\n          }\n          this.webSocketManager.sendMessage(querySetModification);\n          for (var message of this.requestManager.restart()) {\n            this.webSocketManager.sendMessage(message);\n          }\n        },\n        onResume: () => {\n          var _this$state$resume = this.state.resume(),\n            _this$state$resume2 = _slicedToArray(_this$state$resume, 2),\n            querySetModification = _this$state$resume2[0],\n            authModification = _this$state$resume2[1];\n          if (authModification) {\n            this.webSocketManager.sendMessage(authModification);\n          }\n          if (querySetModification) {\n            this.webSocketManager.sendMessage(querySetModification);\n          }\n          for (var message of this.requestManager.resume()) {\n            this.webSocketManager.sendMessage(message);\n          }\n        },\n        onMessage: serverMessage => {\n          if (!this.firstMessageReceived) {\n            this.firstMessageReceived = true;\n            this.mark(\"convexFirstMessageReceived\");\n            this.reportMarks();\n          }\n          switch (serverMessage.type) {\n            case \"Transition\":\n              {\n                this.observedTimestamp(serverMessage.endVersion.ts);\n                this.authenticationManager.onTransition(serverMessage);\n                this.remoteQuerySet.transition(serverMessage);\n                this.state.transition(serverMessage);\n                var completedRequests = this.requestManager.removeCompleted(this.remoteQuerySet.timestamp());\n                this.notifyOnQueryResultChanges(completedRequests);\n                break;\n              }\n            case \"MutationResponse\":\n              {\n                if (serverMessage.success) {\n                  this.observedTimestamp(serverMessage.ts);\n                }\n                var completedMutationInfo = this.requestManager.onResponse(serverMessage);\n                if (completedMutationInfo !== null) {\n                  this.notifyOnQueryResultChanges(/* @__PURE__ */new Map([[completedMutationInfo.requestId, completedMutationInfo.result]]));\n                }\n                break;\n              }\n            case \"ActionResponse\":\n              {\n                this.requestManager.onResponse(serverMessage);\n                break;\n              }\n            case \"AuthError\":\n              {\n                this.authenticationManager.onAuthError(serverMessage);\n                break;\n              }\n            case \"FatalError\":\n              {\n                var error = (0, import_logging.logFatalError)(this.logger, serverMessage.error);\n                void this.webSocketManager.terminate();\n                throw error;\n              }\n            case \"Ping\":\n              break;\n            // do nothing\n            default:\n              {\n                serverMessage;\n              }\n          }\n          return {\n            hasSyncedPastLastReconnect: this.hasSyncedPastLastReconnect()\n          };\n        },\n        onServerDisconnectError: options.onServerDisconnectError\n      }, webSocketConstructor, this.logger, this.markConnectionStateDirty, this.debug);\n      this.mark(\"convexClientConstructed\");\n      if (options.expectAuth) {\n        pauseSocket();\n      }\n    }\n    /**\n     * Return true if there is outstanding work from prior to the time of the most recent restart.\n     * This indicates that the client has not proven itself to have gotten past the issue that\n     * potentially led to the restart. Use this to influence when to reset backoff after a failure.\n     */\n    return _createClass(BaseConvexClient, [{\n      key: \"hasSyncedPastLastReconnect\",\n      value: function hasSyncedPastLastReconnect() {\n        var hasSyncedPastLastReconnect = this.requestManager.hasSyncedPastLastReconnect() || this.state.hasSyncedPastLastReconnect();\n        return hasSyncedPastLastReconnect;\n      }\n    }, {\n      key: \"observedTimestamp\",\n      value: function observedTimestamp(observedTs) {\n        if (this.maxObservedTimestamp === void 0 || this.maxObservedTimestamp.lessThanOrEqual(observedTs)) {\n          this.maxObservedTimestamp = observedTs;\n        }\n      }\n    }, {\n      key: \"getMaxObservedTimestamp\",\n      value: function getMaxObservedTimestamp() {\n        return this.maxObservedTimestamp;\n      }\n      /**\n       * Compute the current query results based on the remoteQuerySet and the\n       * current optimistic updates and call `onTransition` for all the changed\n       * queries.\n       *\n       * @param completedMutations - A set of mutation IDs whose optimistic updates\n       * are no longer needed.\n       */\n    }, {\n      key: \"notifyOnQueryResultChanges\",\n      value: function notifyOnQueryResultChanges(completedRequests) {\n        var remoteQueryResults = this.remoteQuerySet.remoteQueryResults();\n        var queryTokenToValue = /* @__PURE__ */new Map();\n        for (var _ref of remoteQueryResults) {\n          var _ref2 = _slicedToArray(_ref, 2);\n          var queryId = _ref2[0];\n          var result = _ref2[1];\n          var queryToken = this.state.queryToken(queryId);\n          if (queryToken !== null) {\n            var query = {\n              result,\n              udfPath: this.state.queryPath(queryId),\n              args: this.state.queryArgs(queryId)\n            };\n            queryTokenToValue.set(queryToken, query);\n          }\n        }\n        var changedQueryTokens = this.optimisticQueryResults.ingestQueryResultsFromServer(queryTokenToValue, new Set(completedRequests.keys()));\n        this.handleTransition({\n          queries: changedQueryTokens.map(token => {\n            var optimisticResult = this.optimisticQueryResults.rawQueryResult(token);\n            return {\n              token,\n              modification: {\n                kind: \"Updated\",\n                result: optimisticResult.result\n              }\n            };\n          }),\n          reflectedMutations: Array.from(completedRequests).map(_ref3 => {\n            var _ref4 = _slicedToArray(_ref3, 2),\n              requestId = _ref4[0],\n              result = _ref4[1];\n            return {\n              requestId,\n              result\n            };\n          }),\n          timestamp: this.remoteQuerySet.timestamp()\n        });\n      }\n    }, {\n      key: \"handleTransition\",\n      value: function handleTransition(transition) {\n        for (var fn of this._onTransitionFns.values()) {\n          fn(transition);\n        }\n      }\n      /**\n       * Add a handler that will be called on a transition.\n       *\n       * Any external side effects (e.g. setting React state) should be handled here.\n       *\n       * @param fn\n       *\n       * @returns\n       */\n    }, {\n      key: \"addOnTransitionHandler\",\n      value: function addOnTransitionHandler(fn) {\n        var id = this._transitionHandlerCounter++;\n        this._onTransitionFns.set(id, fn);\n        return () => this._onTransitionFns.delete(id);\n      }\n      /**\n       * Set the authentication token to be used for subsequent queries and mutations.\n       * `fetchToken` will be called automatically again if a token expires.\n       * `fetchToken` should return `null` if the token cannot be retrieved, for example\n       * when the user's rights were permanently revoked.\n       * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n       * @param onChange - a callback that will be called when the authentication status changes\n       */\n    }, {\n      key: \"setAuth\",\n      value: function setAuth(fetchToken, onChange) {\n        void this.authenticationManager.setConfig(fetchToken, onChange);\n      }\n    }, {\n      key: \"hasAuth\",\n      value: function hasAuth() {\n        return this.state.hasAuth();\n      }\n      /** @internal */\n    }, {\n      key: \"setAdminAuth\",\n      value: function setAdminAuth(value, fakeUserIdentity) {\n        var message = this.state.setAdminAuth(value, fakeUserIdentity);\n        this.webSocketManager.sendMessage(message);\n      }\n    }, {\n      key: \"clearAuth\",\n      value: function clearAuth() {\n        var message = this.state.clearAuth();\n        this.webSocketManager.sendMessage(message);\n      }\n      /**\n         * Subscribe to a query function.\n         *\n         * Whenever this query's result changes, the `onTransition` callback\n         * passed into the constructor will be called.\n         *\n         * @param name - The name of the query.\n         * @param args - An arguments object for the query. If this is omitted, the\n         * arguments will be `{}`.\n         * @param options - A {@link SubscribeOptions} options object for this query.\n      \n         * @returns An object containing a {@link QueryToken} corresponding to this\n         * query and an `unsubscribe` callback.\n         */\n    }, {\n      key: \"subscribe\",\n      value: function subscribe(name, args, options) {\n        var argsObject = (0, import_common.parseArgs)(args);\n        var _this$state$subscribe = this.state.subscribe(name, argsObject, options?.journal, options?.componentPath),\n          modification = _this$state$subscribe.modification,\n          queryToken = _this$state$subscribe.queryToken,\n          unsubscribe = _this$state$subscribe.unsubscribe;\n        if (modification !== null) {\n          this.webSocketManager.sendMessage(modification);\n        }\n        return {\n          queryToken,\n          unsubscribe: () => {\n            var modification2 = unsubscribe();\n            if (modification2) {\n              this.webSocketManager.sendMessage(modification2);\n            }\n          }\n        };\n      }\n      /**\n       * A query result based only on the current, local state.\n       *\n       * The only way this will return a value is if we're already subscribed to the\n       * query or its value has been set optimistically.\n       */\n    }, {\n      key: \"localQueryResult\",\n      value: function localQueryResult(udfPath, args) {\n        var argsObject = (0, import_common.parseArgs)(args);\n        var queryToken = (0, import_udf_path_utils.serializePathAndArgs)(udfPath, argsObject);\n        return this.optimisticQueryResults.queryResult(queryToken);\n      }\n      /**\n       * Get query result by query token based on current, local state\n       *\n       * The only way this will return a value is if we're already subscribed to the\n       * query or its value has been set optimistically.\n       *\n       * @internal\n       */\n    }, {\n      key: \"localQueryResultByToken\",\n      value: function localQueryResultByToken(queryToken) {\n        return this.optimisticQueryResults.queryResult(queryToken);\n      }\n      /**\n       * Whether local query result is available for a toke.\n       *\n       * This method does not throw if the result is an error.\n       *\n       * @internal\n       */\n    }, {\n      key: \"hasLocalQueryResultByToken\",\n      value: function hasLocalQueryResultByToken(queryToken) {\n        return this.optimisticQueryResults.hasQueryResult(queryToken);\n      }\n      /**\n       * @internal\n       */\n    }, {\n      key: \"localQueryLogs\",\n      value: function localQueryLogs(udfPath, args) {\n        var argsObject = (0, import_common.parseArgs)(args);\n        var queryToken = (0, import_udf_path_utils.serializePathAndArgs)(udfPath, argsObject);\n        return this.optimisticQueryResults.queryLogs(queryToken);\n      }\n      /**\n       * Retrieve the current {@link QueryJournal} for this query function.\n       *\n       * If we have not yet received a result for this query, this will be `undefined`.\n       *\n       * @param name - The name of the query.\n       * @param args - The arguments object for this query.\n       * @returns The query's {@link QueryJournal} or `undefined`.\n       */\n    }, {\n      key: \"queryJournal\",\n      value: function queryJournal(name, args) {\n        var argsObject = (0, import_common.parseArgs)(args);\n        var queryToken = (0, import_udf_path_utils.serializePathAndArgs)(name, argsObject);\n        return this.state.queryJournal(queryToken);\n      }\n      /**\n       * Get the current {@link ConnectionState} between the client and the Convex\n       * backend.\n       *\n       * @returns The {@link ConnectionState} with the Convex backend.\n       */\n    }, {\n      key: \"connectionState\",\n      value: function connectionState() {\n        var wsConnectionState = this.webSocketManager.connectionState();\n        return {\n          hasInflightRequests: this.requestManager.hasInflightRequests(),\n          isWebSocketConnected: wsConnectionState.isConnected,\n          hasEverConnected: wsConnectionState.hasEverConnected,\n          connectionCount: wsConnectionState.connectionCount,\n          connectionRetries: wsConnectionState.connectionRetries,\n          timeOfOldestInflightRequest: this.requestManager.timeOfOldestInflightRequest(),\n          inflightMutations: this.requestManager.inflightMutations(),\n          inflightActions: this.requestManager.inflightActions()\n        };\n      }\n      /**\n       * Subscribe to the {@link ConnectionState} between the client and the Convex\n       * backend, calling a callback each time it changes.\n       *\n       * Subscribed callbacks will be called when any part of ConnectionState changes.\n       * ConnectionState may grow in future versions (e.g. to provide a array of\n       * inflight requests) in which case callbacks would be called more frequently.\n       *\n       * @returns An unsubscribe function to stop listening.\n       */\n    }, {\n      key: \"subscribeToConnectionState\",\n      value: function subscribeToConnectionState(cb) {\n        var id = this.nextConnectionStateSubscriberId++;\n        this.connectionStateSubscribers.set(id, cb);\n        return () => {\n          this.connectionStateSubscribers.delete(id);\n        };\n      }\n      /**\n         * Execute a mutation function.\n         *\n         * @param name - The name of the mutation.\n         * @param args - An arguments object for the mutation. If this is omitted,\n         * the arguments will be `{}`.\n         * @param options - A {@link MutationOptions} options object for this mutation.\n      \n         * @returns - A promise of the mutation's result.\n         */\n    }, {\n      key: \"mutation\",\n      value: (function () {\n        var _mutation = _asyncToGenerator(function* (name, args, options) {\n          var result = yield this.mutationInternal(name, args, options);\n          if (!result.success) {\n            if (result.errorData !== void 0) {\n              throw (0, import_logging.forwardData)(result, new import_errors.ConvexError((0, import_logging.createHybridErrorStacktrace)(\"mutation\", name, result)));\n            }\n            throw new Error((0, import_logging.createHybridErrorStacktrace)(\"mutation\", name, result));\n          }\n          return result.value;\n        });\n        function mutation(_x, _x2, _x3) {\n          return _mutation.apply(this, arguments);\n        }\n        return mutation;\n      }()\n      /**\n       * @internal\n       */\n      )\n    }, {\n      key: \"mutationInternal\",\n      value: (function () {\n        var _mutationInternal = _asyncToGenerator(function* (udfPath, args, options, componentPath) {\n          var _this$enqueueMutation = this.enqueueMutation(udfPath, args, options, componentPath),\n            mutationPromise = _this$enqueueMutation.mutationPromise;\n          return mutationPromise;\n        });\n        function mutationInternal(_x4, _x5, _x6, _x7) {\n          return _mutationInternal.apply(this, arguments);\n        }\n        return mutationInternal;\n      }()\n      /**\n       * @internal\n       */\n      )\n    }, {\n      key: \"enqueueMutation\",\n      value: function enqueueMutation(udfPath, args, options, componentPath) {\n        var mutationArgs = (0, import_common.parseArgs)(args);\n        this.tryReportLongDisconnect();\n        var requestId = this.nextRequestId;\n        this._nextRequestId++;\n        if (options !== void 0) {\n          var optimisticUpdate = options.optimisticUpdate;\n          if (optimisticUpdate !== void 0) {\n            var wrappedUpdate = localQueryStore => {\n              var result = optimisticUpdate(localQueryStore, mutationArgs);\n              if (result instanceof Promise) {\n                this.logger.warn(\"Optimistic update handler returned a Promise. Optimistic updates should be synchronous.\");\n              }\n            };\n            var changedQueryTokens = this.optimisticQueryResults.applyOptimisticUpdate(wrappedUpdate, requestId);\n            var changedQueries = changedQueryTokens.map(token => {\n              var localResult = this.localQueryResultByToken(token);\n              return {\n                token,\n                modification: {\n                  kind: \"Updated\",\n                  result: localResult === void 0 ? void 0 : {\n                    success: true,\n                    value: localResult,\n                    logLines: []\n                  }\n                }\n              };\n            });\n            this.handleTransition({\n              queries: changedQueries,\n              reflectedMutations: [],\n              timestamp: this.remoteQuerySet.timestamp()\n            });\n          }\n        }\n        var message = {\n          type: \"Mutation\",\n          requestId,\n          udfPath,\n          componentPath,\n          args: [(0, import_values.convexToJson)(mutationArgs)]\n        };\n        var mightBeSent = this.webSocketManager.sendMessage(message);\n        var mutationPromise = this.requestManager.request(message, mightBeSent);\n        return {\n          requestId,\n          mutationPromise\n        };\n      }\n      /**\n       * Execute an action function.\n       *\n       * @param name - The name of the action.\n       * @param args - An arguments object for the action. If this is omitted,\n       * the arguments will be `{}`.\n       * @returns A promise of the action's result.\n       */\n    }, {\n      key: \"action\",\n      value: (function () {\n        var _action = _asyncToGenerator(function* (name, args) {\n          var result = yield this.actionInternal(name, args);\n          if (!result.success) {\n            if (result.errorData !== void 0) {\n              throw (0, import_logging.forwardData)(result, new import_errors.ConvexError((0, import_logging.createHybridErrorStacktrace)(\"action\", name, result)));\n            }\n            throw new Error((0, import_logging.createHybridErrorStacktrace)(\"action\", name, result));\n          }\n          return result.value;\n        });\n        function action(_x8, _x9) {\n          return _action.apply(this, arguments);\n        }\n        return action;\n      }()\n      /**\n       * @internal\n       */\n      )\n    }, {\n      key: \"actionInternal\",\n      value: (function () {\n        var _actionInternal = _asyncToGenerator(function* (udfPath, args, componentPath) {\n          var actionArgs = (0, import_common.parseArgs)(args);\n          var requestId = this.nextRequestId;\n          this._nextRequestId++;\n          this.tryReportLongDisconnect();\n          var message = {\n            type: \"Action\",\n            requestId,\n            udfPath,\n            componentPath,\n            args: [(0, import_values.convexToJson)(actionArgs)]\n          };\n          var mightBeSent = this.webSocketManager.sendMessage(message);\n          return this.requestManager.request(message, mightBeSent);\n        });\n        function actionInternal(_x0, _x1, _x10) {\n          return _actionInternal.apply(this, arguments);\n        }\n        return actionInternal;\n      }()\n      /**\n       * Close any network handles associated with this client and stop all subscriptions.\n       *\n       * Call this method when you're done with an {@link BaseConvexClient} to\n       * dispose of its sockets and resources.\n       *\n       * @returns A `Promise` fulfilled when the connection has been completely closed.\n       */\n      )\n    }, {\n      key: \"close\",\n      value: (function () {\n        var _close = _asyncToGenerator(function* () {\n          this.authenticationManager.stop();\n          return this.webSocketManager.terminate();\n        });\n        function close() {\n          return _close.apply(this, arguments);\n        }\n        return close;\n      }()\n      /**\n       * Return the address for this client, useful for creating a new client.\n       *\n       * Not guaranteed to match the address with which this client was constructed:\n       * it may be canonicalized.\n       */\n      )\n    }, {\n      key: \"url\",\n      get: function () {\n        return this.address;\n      }\n      /**\n       * @internal\n       */\n    }, {\n      key: \"nextRequestId\",\n      get: function () {\n        return this._nextRequestId;\n      }\n      /**\n       * @internal\n       */\n    }, {\n      key: \"sessionId\",\n      get: function () {\n        return this._sessionId;\n      }\n      /**\n       * Reports performance marks to the server. This should only be called when\n       * we have a functional websocket.\n       */\n    }, {\n      key: \"reportMarks\",\n      value: function reportMarks() {\n        if (this.debug) {\n          var report = (0, import_metrics.getMarksReport)(this.sessionId);\n          this.webSocketManager.sendMessage({\n            type: \"Event\",\n            eventType: \"ClientConnect\",\n            event: report\n          });\n        }\n      }\n    }, {\n      key: \"tryReportLongDisconnect\",\n      value: function tryReportLongDisconnect() {\n        if (!this.debug) {\n          return;\n        }\n        var timeOfOldestRequest = this.connectionState().timeOfOldestInflightRequest;\n        if (timeOfOldestRequest === null || Date.now() - timeOfOldestRequest.getTime() <= 60 * 1e3) {\n          return;\n        }\n        var endpoint = `${this.address}/api/debug_event`;\n        fetch(endpoint, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": `npm-${import__.version}`\n          },\n          body: JSON.stringify({\n            event: \"LongWebsocketDisconnect\"\n          })\n        }).then(response => {\n          if (!response.ok) {\n            this.logger.warn(\"Analytics request failed with response:\", response.body);\n          }\n        }).catch(error => {\n          this.logger.warn(\"Analytics response failed with error:\", error);\n        });\n      }\n    }]);\n  }();\n});","lineCount":812,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_asyncToGenerator"],[4,23,1,13],[4,26,1,13,"require"],[4,33,1,13],[4,34,1,13,"_dependencyMap"],[4,48,1,13],[4,96,1,13,"default"],[4,103,1,13],[5,2,1,13],[5,6,1,13,"_readOnlyError"],[5,20,1,13],[5,23,1,13,"require"],[5,30,1,13],[5,31,1,13,"_dependencyMap"],[5,45,1,13],[5,90,1,13,"default"],[5,97,1,13],[6,2,1,13],[6,6,1,13,"_slicedToArray"],[6,20,1,13],[6,23,1,13,"require"],[6,30,1,13],[6,31,1,13,"_dependencyMap"],[6,45,1,13],[6,90,1,13,"default"],[6,97,1,13],[7,2,1,13],[7,6,1,13,"_classCallCheck"],[7,21,1,13],[7,24,1,13,"require"],[7,31,1,13],[7,32,1,13,"_dependencyMap"],[7,46,1,13],[7,92,1,13,"default"],[7,99,1,13],[8,2,1,13],[8,6,1,13,"_createClass"],[8,18,1,13],[8,21,1,13,"require"],[8,28,1,13],[8,29,1,13,"_dependencyMap"],[8,43,1,13],[8,86,1,13,"default"],[8,93,1,13],[9,2,2,0],[9,6,2,4,"__defProp"],[9,15,2,13],[9,18,2,16,"Object"],[9,24,2,22],[9,25,2,23,"defineProperty"],[9,39,2,37],[10,2,3,0],[10,6,3,4,"__getOwnPropDesc"],[10,22,3,20],[10,25,3,23,"Object"],[10,31,3,29],[10,32,3,30,"getOwnPropertyDescriptor"],[10,56,3,54],[11,2,4,0],[11,6,4,4,"__getOwnPropNames"],[11,23,4,21],[11,26,4,24,"Object"],[11,32,4,30],[11,33,4,31,"getOwnPropertyNames"],[11,52,4,50],[12,2,5,0],[12,6,5,4,"__hasOwnProp"],[12,18,5,16],[12,21,5,19,"Object"],[12,27,5,25],[12,28,5,26,"prototype"],[12,37,5,35],[12,38,5,36,"hasOwnProperty"],[12,52,5,50],[13,2,6,0],[13,6,6,4,"__defNormalProp"],[13,21,6,19],[13,24,6,22,"__defNormalProp"],[13,25,6,23,"obj"],[13,28,6,26],[13,30,6,28,"key"],[13,33,6,31],[13,35,6,33,"value"],[13,40,6,38],[13,45,6,43,"key"],[13,48,6,46],[13,52,6,50,"obj"],[13,55,6,53],[13,58,6,56,"__defProp"],[13,67,6,65],[13,68,6,66,"obj"],[13,71,6,69],[13,73,6,71,"key"],[13,76,6,74],[13,78,6,76],[14,4,6,78,"enumerable"],[14,14,6,88],[14,16,6,90],[14,20,6,94],[15,4,6,96,"configurable"],[15,16,6,108],[15,18,6,110],[15,22,6,114],[16,4,6,116,"writable"],[16,12,6,124],[16,14,6,126],[16,18,6,130],[17,4,6,132,"value"],[18,2,6,138],[18,3,6,139],[18,4,6,140],[18,7,6,143,"obj"],[18,10,6,146],[18,11,6,147,"key"],[18,14,6,150],[18,15,6,151],[18,18,6,154,"value"],[18,23,6,159],[19,2,7,0],[19,6,7,4,"__export"],[19,14,7,12],[19,17,7,15,"__export"],[19,18,7,16,"target"],[19,24,7,22],[19,26,7,24,"all"],[19,29,7,27],[19,34,7,32],[20,4,8,2],[20,9,8,7],[20,13,8,11,"name"],[20,17,8,15],[20,21,8,19,"all"],[20,24,8,22],[20,26,9,4,"__defProp"],[20,35,9,13],[20,36,9,14,"target"],[20,42,9,20],[20,44,9,22,"name"],[20,48,9,26],[20,50,9,28],[21,6,9,30,"get"],[21,9,9,33],[21,11,9,35,"all"],[21,14,9,38],[21,15,9,39,"name"],[21,19,9,43],[21,20,9,44],[22,6,9,46,"enumerable"],[22,16,9,56],[22,18,9,58],[23,4,9,63],[23,5,9,64],[23,6,9,65],[24,2,10,0],[24,3,10,1],[25,2,11,0],[25,6,11,4,"__copyProps"],[25,17,11,15],[25,20,11,18,"__copyProps"],[25,21,11,19,"to"],[25,23,11,21],[25,25,11,23,"from"],[25,29,11,27],[25,31,11,29,"except"],[25,37,11,35],[25,39,11,37,"desc"],[25,43,11,41],[25,48,11,46],[26,4,12,2],[26,8,12,6,"from"],[26,12,12,10],[26,16,12,14],[26,23,12,21,"from"],[26,27,12,25],[26,32,12,30],[26,40,12,38],[26,44,12,42],[26,51,12,49,"from"],[26,55,12,53],[26,60,12,58],[26,70,12,68],[26,72,12,70],[27,6,12,70],[27,10,12,70,"_loop"],[27,15,12,70],[27,27,12,70,"_loop"],[27,28,12,70,"key"],[27,31,12,70],[28,8,14,6],[28,12,14,10],[28,13,14,11,"__hasOwnProp"],[28,25,14,23],[28,26,14,24,"call"],[28,30,14,28],[28,31,14,29,"to"],[28,33,14,31],[28,35,14,33,"key"],[28,38,14,36],[28,39,14,37],[28,43,14,41,"key"],[28,46,14,44],[28,51,14,49,"except"],[28,57,14,55],[28,59,15,8,"__defProp"],[28,68,15,17],[28,69,15,18,"to"],[28,71,15,20],[28,73,15,22,"key"],[28,76,15,25],[28,78,15,27],[29,10,15,29,"get"],[29,13,15,32],[29,15,15,34,"get"],[29,16,15,34],[29,21,15,40,"from"],[29,25,15,44],[29,26,15,45,"key"],[29,29,15,48],[29,30,15,49],[30,10,15,51,"enumerable"],[30,20,15,61],[30,22,15,63],[30,24,15,65,"desc"],[30,28,15,69],[30,31,15,72,"__getOwnPropDesc"],[30,47,15,88],[30,48,15,89,"from"],[30,52,15,93],[30,54,15,95,"key"],[30,57,15,98],[30,58,15,99],[30,59,15,100],[30,63,15,104,"desc"],[30,67,15,108],[30,68,15,109,"enumerable"],[31,8,15,120],[31,9,15,121],[31,10,15,122],[32,6,15,123],[33,6,13,4],[33,11,13,9],[33,15,13,13,"key"],[33,18,13,16],[33,22,13,20,"__getOwnPropNames"],[33,39,13,37],[33,40,13,38,"from"],[33,44,13,42],[33,45,13,43],[34,8,13,43,"_loop"],[34,13,13,43],[34,14,13,43,"key"],[34,17,13,43],[35,6,13,43],[36,4,16,2],[37,4,17,2],[37,11,17,9,"to"],[37,13,17,11],[38,2,18,0],[38,3,18,1],[39,2,19,0],[39,6,19,4,"__toCommonJS"],[39,18,19,16],[39,21,19,20,"mod"],[39,24,19,23],[39,28,19,28,"__copyProps"],[39,39,19,39],[39,40,19,40,"__defProp"],[39,49,19,49],[39,50,19,50],[39,51,19,51],[39,52,19,52],[39,54,19,54],[39,66,19,66],[39,68,19,68],[40,4,19,70,"value"],[40,9,19,75],[40,11,19,77],[41,2,19,82],[41,3,19,83],[41,4,19,84],[41,6,19,86,"mod"],[41,9,19,89],[41,10,19,90],[42,2,20,0],[42,6,20,4,"__publicField"],[42,19,20,17],[42,22,20,20,"__publicField"],[42,23,20,21,"obj"],[42,26,20,24],[42,28,20,26,"key"],[42,31,20,29],[42,33,20,31,"value"],[42,38,20,36],[42,43,20,41,"__defNormalProp"],[42,58,20,56],[42,59,20,57,"obj"],[42,62,20,60],[42,64,20,62],[42,71,20,69,"key"],[42,74,20,72],[42,79,20,77],[42,87,20,85],[42,90,20,88,"key"],[42,93,20,91],[42,96,20,94],[42,98,20,96],[42,101,20,99,"key"],[42,104,20,102],[42,106,20,104,"value"],[42,111,20,109],[42,112,20,110],[43,2,21,0],[43,6,21,4,"client_exports"],[43,20,21,18],[43,23,21,21],[43,24,21,22],[43,25,21,23],[44,2,22,0,"__export"],[44,10,22,8],[44,11,22,9,"client_exports"],[44,25,22,23],[44,27,22,25],[45,4,23,2,"BaseConvexClient"],[45,20,23,18],[45,22,23,20,"BaseConvexClient"],[45,23,23,20],[45,28,23,26,"BaseConvexClient"],[46,2,24,0],[46,3,24,1],[46,4,24,2],[47,2,25,0,"module"],[47,8,25,6],[47,9,25,7,"exports"],[47,16,25,14],[47,19,25,17,"__toCommonJS"],[47,31,25,29],[47,32,25,30,"client_exports"],[47,46,25,44],[47,47,25,45],[48,2,26,0],[48,6,26,4,"import__"],[48,14,26,12],[48,17,26,15,"require"],[48,24,26,22],[48,25,26,22,"_dependencyMap"],[48,39,26,22],[48,60,26,39],[48,61,26,40],[49,2,27,0],[49,6,27,4,"import_values"],[49,19,27,17],[49,22,27,20,"require"],[49,29,27,27],[49,30,27,27,"_dependencyMap"],[49,44,27,27],[49,72,27,51],[49,73,27,52],[50,2,28,0],[50,6,28,4,"import_logging"],[50,20,28,18],[50,23,28,21,"require"],[50,30,28,28],[50,31,28,28,"_dependencyMap"],[50,45,28,28],[50,65,28,44],[50,66,28,45],[51,2,29,0],[51,6,29,4,"import_local_state"],[51,24,29,22],[51,27,29,25,"require"],[51,34,29,32],[51,35,29,32,"_dependencyMap"],[51,49,29,32],[51,72,29,51],[51,73,29,52],[52,2,30,0],[52,6,30,4,"import_request_manager"],[52,28,30,26],[52,31,30,29,"require"],[52,38,30,36],[52,39,30,36,"_dependencyMap"],[52,53,30,36],[52,80,30,59],[52,81,30,60],[53,2,31,0],[53,6,31,4,"import_optimistic_updates_impl"],[53,36,31,34],[53,39,31,37,"require"],[53,46,31,44],[53,47,31,44,"_dependencyMap"],[53,61,31,44],[53,97,31,75],[53,98,31,76],[54,2,32,0],[54,6,32,4,"import_remote_query_set"],[54,29,32,27],[54,32,32,30,"require"],[54,39,32,37],[54,40,32,37,"_dependencyMap"],[54,54,32,37],[54,83,32,61],[54,84,32,62],[55,2,33,0],[55,6,33,4,"import_udf_path_utils"],[55,27,33,25],[55,30,33,28,"require"],[55,37,33,35],[55,38,33,35,"_dependencyMap"],[55,52,33,35],[55,79,33,57],[55,80,33,58],[56,2,34,0],[56,6,34,4,"import_web_socket_manager"],[56,31,34,29],[56,34,34,32,"require"],[56,41,34,39],[56,42,34,39,"_dependencyMap"],[56,56,34,39],[56,87,34,65],[56,88,34,66],[57,2,35,0],[57,6,35,4,"import_session"],[57,20,35,18],[57,23,35,21,"require"],[57,30,35,28],[57,31,35,28,"_dependencyMap"],[57,45,35,28],[57,65,35,43],[57,66,35,44],[58,2,36,0],[58,6,36,4,"import_authentication_manager"],[58,35,36,33],[58,38,36,36,"require"],[58,45,36,43],[58,46,36,43,"_dependencyMap"],[58,60,36,43],[58,95,36,73],[58,96,36,74],[59,2,37,0],[59,6,37,4,"import_metrics"],[59,20,37,18],[59,23,37,21,"require"],[59,30,37,28],[59,31,37,28,"_dependencyMap"],[59,45,37,28],[59,65,37,43],[59,66,37,44],[60,2,38,0],[60,6,38,4,"import_common"],[60,19,38,17],[60,22,38,20,"require"],[60,29,38,27],[60,30,38,27,"_dependencyMap"],[60,44,38,27],[60,73,38,51],[60,74,38,52],[61,2,39,0],[61,6,39,4,"import_errors"],[61,19,39,17],[61,22,39,20,"require"],[61,29,39,27],[61,30,39,27,"_dependencyMap"],[61,44,39,27],[61,74,39,52],[61,75,39,53],[62,2,39,54],[62,6,40,6,"BaseConvexClient"],[62,22,40,22],[63,4,41,2],[64,0,42,0],[65,0,43,0],[66,0,44,0],[67,0,45,0],[68,0,46,0],[69,0,47,0],[70,0,48,0],[71,4,49,2],[71,13,49,2,"BaseConvexClient"],[71,30,49,14,"address"],[71,37,49,21],[71,39,49,23,"onTransition"],[71,51,49,35],[71,53,49,37,"options"],[71,60,49,44],[71,62,49,46],[72,6,49,46,"_classCallCheck"],[72,21,49,46],[72,28,49,46,"BaseConvexClient"],[72,44,49,46],[73,6,50,4,"__publicField"],[73,19,50,17],[73,20,50,18],[73,24,50,22],[73,26,50,24],[73,35,50,33],[73,36,50,34],[74,6,51,4,"__publicField"],[74,19,51,17],[74,20,51,18],[74,24,51,22],[74,26,51,24],[74,33,51,31],[74,34,51,32],[75,6,52,4,"__publicField"],[75,19,52,17],[75,20,52,18],[75,24,52,22],[75,26,52,24],[75,42,52,40],[75,43,52,41],[76,6,53,4,"__publicField"],[76,19,53,17],[76,20,53,18],[76,24,53,22],[76,26,53,24],[76,44,53,42],[76,45,53,43],[77,6,54,4,"__publicField"],[77,19,54,17],[77,20,54,18],[77,24,54,22],[77,26,54,24],[77,49,54,47],[77,50,54,48],[78,6,55,4,"__publicField"],[78,19,55,17],[78,20,55,18],[78,24,55,22],[78,26,55,24],[78,42,55,40],[78,43,55,41],[79,6,56,4,"__publicField"],[79,19,56,17],[79,20,56,18],[79,24,56,22],[79,26,56,24],[79,50,56,48],[79,51,56,49],[80,6,57,4,"__publicField"],[80,19,57,17],[80,20,57,18],[80,24,57,22],[80,26,57,24],[80,53,57,51],[80,55,57,53],[80,56,57,54],[80,57,57,55],[81,6,58,4,"__publicField"],[81,19,58,17],[81,20,58,18],[81,24,58,22],[81,26,58,24],[81,42,58,40],[81,43,58,41],[82,6,59,4,"__publicField"],[82,19,59,17],[82,20,59,18],[82,24,59,22],[82,26,59,24],[82,44,59,42],[82,46,59,44],[82,61,59,60],[82,65,59,64,"Map"],[82,68,59,67],[82,69,59,68],[82,70,59,69],[82,71,59,70],[83,6,60,4,"__publicField"],[83,19,60,17],[83,20,60,18],[83,24,60,22],[83,26,60,24],[83,38,60,36],[83,39,60,37],[84,6,61,4,"__publicField"],[84,19,61,17],[84,20,61,18],[84,24,61,22],[84,26,61,24],[84,48,61,46],[84,50,61,48],[84,55,61,53],[84,56,61,54],[85,6,62,4,"__publicField"],[85,19,62,17],[85,20,62,18],[85,24,62,22],[85,26,62,24],[85,33,62,31],[85,34,62,32],[86,6,63,4,"__publicField"],[86,19,63,17],[86,20,63,18],[86,24,63,22],[86,26,63,24],[86,34,63,32],[86,35,63,33],[87,6,64,4,"__publicField"],[87,19,64,17],[87,20,64,18],[87,24,64,22],[87,26,64,24],[87,48,64,46],[87,49,64,47],[88,6,65,4,"__publicField"],[88,19,65,17],[88,20,65,18],[88,24,65,22],[88,26,65,24],[88,54,65,52],[88,56,65,54],[88,71,65,70],[88,75,65,74,"Map"],[88,78,65,77],[88,79,65,78],[88,80,65,79],[88,81,65,80],[89,6,66,4,"__publicField"],[89,19,66,17],[89,20,66,18],[89,24,66,22],[89,26,66,24],[89,59,66,57],[89,61,66,59],[89,62,66,60],[89,63,66,61],[90,6,67,4,"__publicField"],[90,19,67,17],[90,20,67,18],[90,24,67,22],[90,26,67,24],[90,57,67,55],[90,58,67,56],[91,6,68,4],[92,0,69,0],[93,0,70,0],[94,0,71,0],[95,6,72,4,"__publicField"],[95,19,72,17],[95,20,72,18],[95,24,72,22],[95,26,72,24],[95,52,72,50],[95,54,72,52],[95,60,72,58],[96,8,73,6],[96,13,73,11,"Promise"],[96,20,73,18],[96,21,73,19,"resolve"],[96,28,73,26],[96,29,73,27],[96,30,73,28],[96,31,73,29,"then"],[96,35,73,33],[96,36,73,34],[96,42,73,40],[97,10,74,8],[97,14,74,14,"curConnectionState"],[97,32,74,32],[97,35,74,35],[97,39,74,39],[97,40,74,40,"connectionState"],[97,55,74,55],[97,56,74,56],[97,57,74,57],[98,10,75,8],[98,14,75,12,"JSON"],[98,18,75,16],[98,19,75,17,"stringify"],[98,28,75,26],[98,29,75,27,"curConnectionState"],[98,47,75,45],[98,48,75,46],[98,53,75,51,"JSON"],[98,57,75,55],[98,58,75,56,"stringify"],[98,67,75,65],[98,68,75,66],[98,72,75,70],[98,73,75,71,"_lastPublishedConnectionState"],[98,102,75,100],[98,103,75,101],[98,105,75,103],[99,12,76,10],[99,16,76,14],[99,17,76,15,"_lastPublishedConnectionState"],[99,46,76,44],[99,49,76,47,"curConnectionState"],[99,67,76,65],[100,12,77,10],[100,17,77,15],[100,21,77,21,"cb"],[100,23,77,23],[100,27,77,27],[100,31,77,31],[100,32,77,32,"connectionStateSubscribers"],[100,58,77,58],[100,59,77,59,"values"],[100,65,77,65],[100,66,77,66],[100,67,77,67],[100,69,77,69],[101,14,78,12,"cb"],[101,16,78,14],[101,17,78,15,"curConnectionState"],[101,35,78,33],[101,36,78,34],[102,12,79,10],[103,10,80,8],[104,8,81,6],[104,9,81,7],[104,10,81,8],[105,6,82,4],[105,7,82,5],[105,8,82,6],[106,6,83,4],[107,6,84,4,"__publicField"],[107,19,84,17],[107,20,84,18],[107,24,84,22],[107,26,84,24],[107,32,84,30],[107,34,84,33,"name"],[107,38,84,37],[107,42,84,42],[108,8,85,6],[108,12,85,10],[108,16,85,14],[108,17,85,15,"debug"],[108,22,85,20],[108,24,85,22],[109,10,86,8],[109,11,86,9],[109,12,86,10],[109,14,86,12,"import_metrics"],[109,28,86,26],[109,29,86,27,"mark"],[109,33,86,31],[109,35,86,33,"name"],[109,39,86,37],[109,41,86,39],[109,45,86,43],[109,46,86,44,"sessionId"],[109,55,86,53],[109,56,86,54],[110,8,87,6],[111,6,88,4],[111,7,88,5],[111,8,88,6],[112,6,89,4],[112,10,89,8],[112,17,89,15,"address"],[112,24,89,22],[112,29,89,27],[112,37,89,35],[112,39,89,37],[113,8,90,6],[113,14,90,12],[113,18,90,16,"Error"],[113,23,90,21],[113,24,91,8],[113,139,92,6],[113,140,92,7],[114,6,93,4],[115,6,94,4],[115,10,94,8,"options"],[115,17,94,15],[115,19,94,17,"skipConvexDeploymentUrlCheck"],[115,47,94,45],[115,52,94,50],[115,56,94,54],[115,58,94,56],[116,8,95,6],[116,9,95,7],[116,10,95,8],[116,12,95,10,"import_common"],[116,25,95,23],[116,26,95,24,"validateDeploymentUrl"],[116,47,95,45],[116,49,95,47,"address"],[116,56,95,54],[116,57,95,55],[117,6,96,4],[118,6,97,4,"options"],[118,13,97,11],[118,16,97,14],[119,8,97,16],[119,11,97,19,"options"],[120,6,97,27],[120,7,97,28],[121,6,98,4],[121,10,98,10,"authRefreshTokenLeewaySeconds"],[121,39,98,39],[121,42,98,42,"options"],[121,49,98,49],[121,50,98,50,"authRefreshTokenLeewaySeconds"],[121,79,98,79],[121,83,98,83],[121,84,98,84],[122,6,99,4],[122,10,99,8,"webSocketConstructor"],[122,30,99,28],[122,33,99,31,"options"],[122,40,99,38],[122,41,99,39,"webSocketConstructor"],[122,61,99,59],[123,6,100,4],[123,10,100,8],[123,11,100,9,"webSocketConstructor"],[123,31,100,29],[123,35,100,33],[123,42,100,40,"WebSocket"],[123,51,100,49],[123,56,100,54],[123,67,100,65],[123,69,100,67],[124,8,101,6],[124,14,101,12],[124,18,101,16,"Error"],[124,23,101,21],[124,24,102,8],[124,195,103,6],[124,196,103,7],[125,6,104,4],[126,6,105,4,"webSocketConstructor"],[126,26,105,24],[126,29,105,27,"webSocketConstructor"],[126,49,105,47],[126,53,105,51,"WebSocket"],[126,62,105,60],[127,6,106,4],[127,10,106,8],[127,11,106,9,"debug"],[127,16,106,14],[127,19,106,17,"options"],[127,26,106,24],[127,27,106,25,"reportDebugInfoToConvex"],[127,50,106,48],[127,54,106,52],[127,59,106,57],[128,6,107,4],[128,10,107,8],[128,11,107,9,"address"],[128,18,107,16],[128,21,107,19,"address"],[128,28,107,26],[129,6,108,4],[129,10,108,8],[129,11,108,9,"logger"],[129,17,108,15],[129,20,108,18,"options"],[129,27,108,25],[129,28,108,26,"logger"],[129,34,108,32],[129,39,108,37],[129,44,108,42],[129,47,108,45],[129,48,108,46],[129,49,108,47],[129,51,108,49,"import_logging"],[129,65,108,63],[129,66,108,64,"instantiateNoopLogger"],[129,87,108,85],[129,89,108,87],[130,8,108,89,"verbose"],[130,15,108,96],[130,17,108,98,"options"],[130,24,108,105],[130,25,108,106,"verbose"],[130,32,108,113],[130,36,108,117],[131,6,108,123],[131,7,108,124],[131,8,108,125],[131,11,108,128,"options"],[131,18,108,135],[131,19,108,136,"logger"],[131,25,108,142],[131,30,108,147],[131,34,108,151],[131,38,108,155,"options"],[131,45,108,162],[131,46,108,163,"logger"],[131,52,108,169],[131,55,108,172,"options"],[131,62,108,179],[131,63,108,180,"logger"],[131,69,108,186],[131,72,108,189],[131,73,108,190],[131,74,108,191],[131,76,108,193,"import_logging"],[131,90,108,207],[131,91,108,208,"instantiateDefaultLogger"],[131,115,108,232],[131,117,108,234],[132,8,108,236,"verbose"],[132,15,108,243],[132,17,108,245,"options"],[132,24,108,252],[132,25,108,253,"verbose"],[132,32,108,260],[132,36,108,264],[133,6,108,270],[133,7,108,271],[133,8,108,272],[134,6,109,4],[134,10,109,10,"i"],[134,11,109,11],[134,14,109,14,"address"],[134,21,109,21],[134,22,109,22,"search"],[134,28,109,28],[134,29,109,29],[134,34,109,34],[134,35,109,35],[135,6,110,4],[135,10,110,8,"i"],[135,11,110,9],[135,16,110,14],[135,17,110,15],[135,18,110,16],[135,20,110,18],[136,8,111,6],[136,14,111,12],[136,18,111,16,"Error"],[136,23,111,21],[136,24,111,22],[136,67,111,65],[136,68,111,66],[137,6,112,4],[138,6,113,4],[138,10,113,10,"origin"],[138,16,113,16],[138,19,113,19,"address"],[138,26,113,26],[138,27,113,27,"substring"],[138,36,113,36],[138,37,113,37,"i"],[138,38,113,38],[138,41,113,41],[138,42,113,42],[138,43,113,43],[139,6,114,4],[139,10,114,10,"protocol"],[139,18,114,18],[139,21,114,21,"address"],[139,28,114,28],[139,29,114,29,"substring"],[139,38,114,38],[139,39,114,39],[139,40,114,40],[139,42,114,42,"i"],[139,43,114,43],[139,44,114,44],[140,6,115,4],[140,10,115,8,"wsProtocol"],[140,20,115,18],[141,6,116,4],[141,10,116,8,"protocol"],[141,18,116,16],[141,23,116,21],[141,29,116,27],[141,31,116,29],[142,8,117,6,"wsProtocol"],[142,18,117,16],[142,21,117,19],[142,25,117,23],[143,6,118,4],[143,7,118,5],[143,13,118,11],[143,17,118,15,"protocol"],[143,25,118,23],[143,30,118,28],[143,37,118,35],[143,39,118,37],[144,8,119,6,"wsProtocol"],[144,18,119,16],[144,21,119,19],[144,26,119,24],[145,6,120,4],[145,7,120,5],[145,13,120,11],[146,8,121,6],[146,14,121,12],[146,18,121,16,"Error"],[146,23,121,21],[146,24,121,22],[146,51,121,49,"protocol"],[146,59,121,57],[146,61,121,59],[146,62,121,60],[147,6,122,4],[148,6,123,4],[148,10,123,10,"wsUri"],[148,15,123,15],[148,18,123,18],[148,21,123,21,"wsProtocol"],[148,31,123,31],[148,37,123,37,"origin"],[148,43,123,43],[148,51,123,51,"import__"],[148,59,123,59],[148,60,123,60,"version"],[148,67,123,67],[148,74,123,74],[149,6,124,4],[149,10,124,8],[149,11,124,9,"state"],[149,16,124,14],[149,19,124,17],[149,23,124,21,"import_local_state"],[149,41,124,39],[149,42,124,40,"LocalSyncState"],[149,56,124,54],[149,57,124,55],[149,58,124,56],[150,6,125,4],[150,10,125,8],[150,11,125,9,"remoteQuerySet"],[150,25,125,23],[150,28,125,26],[150,32,125,30,"import_remote_query_set"],[150,55,125,53],[150,56,125,54,"RemoteQuerySet"],[150,70,125,68],[150,71,126,7,"queryId"],[150,78,126,14],[150,82,126,19],[150,86,126,23],[150,87,126,24,"state"],[150,92,126,29],[150,93,126,30,"queryPath"],[150,102,126,39],[150,103,126,40,"queryId"],[150,110,126,47],[150,111,126,48],[150,113,127,6],[150,117,127,10],[150,118,127,11,"logger"],[150,124,128,4],[150,125,128,5],[151,6,129,4],[151,10,129,8],[151,11,129,9,"requestManager"],[151,25,129,23],[151,28,129,26],[151,32,129,30,"import_request_manager"],[151,54,129,52],[151,55,129,53,"RequestManager"],[151,69,129,67],[151,70,130,6],[151,74,130,10],[151,75,130,11,"logger"],[151,81,130,17],[151,83,131,6],[151,87,131,10],[151,88,131,11,"markConnectionStateDirty"],[151,112,132,4],[151,113,132,5],[152,6,133,4],[152,10,133,10,"pauseSocket"],[152,21,133,21],[152,24,133,24,"pauseSocket"],[152,25,133,24],[152,30,133,30],[153,8,134,6],[153,12,134,10],[153,13,134,11,"webSocketManager"],[153,29,134,27],[153,30,134,28,"pause"],[153,35,134,33],[153,36,134,34],[153,37,134,35],[154,8,135,6],[154,12,135,10],[154,13,135,11,"state"],[154,18,135,16],[154,19,135,17,"pause"],[154,24,135,22],[154,25,135,23],[154,26,135,24],[155,6,136,4],[155,7,136,5],[156,6,137,4],[156,10,137,8],[156,11,137,9,"authenticationManager"],[156,32,137,30],[156,35,137,33],[156,39,137,37,"import_authentication_manager"],[156,68,137,66],[156,69,137,67,"AuthenticationManager"],[156,90,137,88],[156,91,138,6],[156,95,138,10],[156,96,138,11,"state"],[156,101,138,16],[156,103,139,6],[157,8,140,8,"authenticate"],[157,20,140,20],[157,22,140,23,"token"],[157,27,140,28],[157,31,140,33],[158,10,141,10],[158,14,141,16,"message"],[158,21,141,23],[158,24,141,26],[158,28,141,30],[158,29,141,31,"state"],[158,34,141,36],[158,35,141,37,"setAuth"],[158,42,141,44],[158,43,141,45,"token"],[158,48,141,50],[158,49,141,51],[159,10,142,10],[159,14,142,14],[159,15,142,15,"webSocketManager"],[159,31,142,31],[159,32,142,32,"sendMessage"],[159,43,142,43],[159,44,142,44,"message"],[159,51,142,51],[159,52,142,52],[160,10,143,10],[160,17,143,17,"message"],[160,24,143,24],[160,25,143,25,"baseVersion"],[160,36,143,36],[161,8,144,8],[161,9,144,9],[162,8,145,8,"stopSocket"],[162,18,145,18],[162,20,145,20,"stopSocket"],[162,21,145,20],[162,26,145,26],[162,30,145,30],[162,31,145,31,"webSocketManager"],[162,47,145,47],[162,48,145,48,"stop"],[162,52,145,52],[162,53,145,53],[162,54,145,54],[163,8,146,8,"tryRestartSocket"],[163,24,146,24],[163,26,146,26,"tryRestartSocket"],[163,27,146,26],[163,32,146,32],[163,36,146,36],[163,37,146,37,"webSocketManager"],[163,53,146,53],[163,54,146,54,"tryRestart"],[163,64,146,64],[163,65,146,65],[163,66,146,66],[164,8,147,8,"pauseSocket"],[164,19,147,19],[165,8,148,8,"resumeSocket"],[165,20,148,20],[165,22,148,22,"resumeSocket"],[165,23,148,22],[165,28,148,28],[165,32,148,32],[165,33,148,33,"webSocketManager"],[165,49,148,49],[165,50,148,50,"resume"],[165,56,148,56],[165,57,148,57],[165,58,148,58],[166,8,149,8,"clearAuth"],[166,17,149,17],[166,19,149,19,"clearAuth"],[166,20,149,19],[166,25,149,25],[167,10,150,10],[167,14,150,14],[167,15,150,15,"clearAuth"],[167,24,150,24],[167,25,150,25],[167,26,150,26],[168,8,151,8],[169,6,152,6],[169,7,152,7],[169,9,153,6],[170,8,154,8,"logger"],[170,14,154,14],[170,16,154,16],[170,20,154,20],[170,21,154,21,"logger"],[170,27,154,27],[171,8,155,8,"refreshTokenLeewaySeconds"],[171,33,155,33],[171,35,155,35,"authRefreshTokenLeewaySeconds"],[172,6,156,6],[172,7,157,4],[172,8,157,5],[173,6,158,4],[173,10,158,8],[173,11,158,9,"optimisticQueryResults"],[173,33,158,31],[173,36,158,34],[173,40,158,38,"import_optimistic_updates_impl"],[173,70,158,68],[173,71,158,69,"OptimisticQueryResults"],[173,93,158,91],[173,94,158,92],[173,95,158,93],[174,6,159,4],[174,10,159,8],[174,11,159,9,"addOnTransitionHandler"],[174,33,159,31],[174,34,159,33,"transition"],[174,44,159,43],[174,48,159,48],[175,8,160,6,"onTransition"],[175,20,160,18],[175,21,160,19,"transition"],[175,31,160,29],[175,32,160,30,"queries"],[175,39,160,37],[175,40,160,38,"map"],[175,43,160,41],[175,44,160,43,"q"],[175,45,160,44],[175,49,160,49,"q"],[175,50,160,50],[175,51,160,51,"token"],[175,56,160,56],[175,57,160,57],[175,58,160,58],[176,6,161,4],[176,7,161,5],[176,8,161,6],[177,6,162,4],[177,10,162,8],[177,11,162,9,"_nextRequestId"],[177,25,162,23],[177,28,162,26],[177,29,162,27],[178,6,163,4],[178,10,163,8],[178,11,163,9,"_sessionId"],[178,21,163,19],[178,24,163,22],[178,25,163,23],[178,26,163,24],[178,28,163,26,"import_session"],[178,42,163,40],[178,43,163,41,"newSessionId"],[178,55,163,53],[178,57,163,55],[178,58,163,56],[179,6,164,4],[179,10,164,4,"_options"],[179,18,164,4],[179,21,164,38,"options"],[179,28,164,45],[180,8,164,12,"unsavedChangesWarning"],[180,29,164,33],[180,32,164,33,"_options"],[180,40,164,33],[180,41,164,12,"unsavedChangesWarning"],[180,62,164,33],[181,6,165,4],[181,10,165,8],[181,17,165,15,"window"],[181,23,165,21],[181,28,165,26],[181,39,165,37],[181,43,165,41],[181,50,165,48,"window"],[181,56,165,54],[181,57,165,55,"addEventListener"],[181,73,165,71],[181,78,165,76],[181,89,165,87],[181,91,165,89],[182,8,166,6],[182,12,166,10,"unsavedChangesWarning"],[182,33,166,31],[182,38,166,36],[182,42,166,40],[182,44,166,42],[183,10,167,8],[183,16,167,14],[183,20,167,18,"Error"],[183,25,167,23],[183,26,168,10],[183,164,169,8],[183,165,169,9],[184,8,170,6],[185,6,171,4],[185,7,171,5],[185,13,171,11],[185,17,171,15,"unsavedChangesWarning"],[185,38,171,36],[185,43,171,41],[185,48,171,46],[185,50,171,48],[186,8,172,6,"window"],[186,14,172,12],[186,15,172,13,"addEventListener"],[186,31,172,29],[186,32,172,30],[186,46,172,44],[186,48,172,47,"e"],[186,49,172,48],[186,53,172,53],[187,10,173,8],[187,14,173,12],[187,18,173,16],[187,19,173,17,"requestManager"],[187,33,173,31],[187,34,173,32,"hasIncompleteRequests"],[187,55,173,53],[187,56,173,54],[187,57,173,55],[187,59,173,57],[188,12,174,10,"e"],[188,13,174,11],[188,14,174,12,"preventDefault"],[188,28,174,26],[188,29,174,27],[188,30,174,28],[189,12,175,10],[189,16,175,16,"confirmationMessage"],[189,35,175,35],[189,38,175,38],[189,102,175,102],[190,12,176,10],[190,13,176,11,"e"],[190,14,176,12],[190,18,176,16,"window"],[190,24,176,22],[190,25,176,23,"event"],[190,30,176,28],[190,32,176,30,"returnValue"],[190,43,176,41],[190,46,176,44,"confirmationMessage"],[190,65,176,63],[191,12,177,10],[191,19,177,17,"confirmationMessage"],[191,38,177,36],[192,10,178,8],[193,8,179,6],[193,9,179,7],[193,10,179,8],[194,6,180,4],[195,6,181,4],[195,10,181,8],[195,11,181,9,"webSocketManager"],[195,27,181,25],[195,30,181,28],[195,34,181,32,"import_web_socket_manager"],[195,59,181,57],[195,60,181,58,"WebSocketManager"],[195,76,181,74],[195,77,182,6,"wsUri"],[195,82,182,11],[195,84,183,6],[196,8,184,8,"onOpen"],[196,14,184,14],[196,16,184,17,"reconnectMetadata"],[196,33,184,34],[196,37,184,39],[197,10,185,10],[197,14,185,14],[197,15,185,15,"mark"],[197,19,185,19],[197,20,185,20],[197,41,185,41],[197,42,185,42],[198,10,186,10],[198,14,186,14],[198,15,186,15,"webSocketManager"],[198,31,186,31],[198,32,186,32,"sendMessage"],[198,43,186,43],[198,44,186,44],[199,12,187,12],[199,15,187,15,"reconnectMetadata"],[199,32,187,32],[200,12,188,12,"type"],[200,16,188,16],[200,18,188,18],[200,27,188,27],[201,12,189,12,"sessionId"],[201,21,189,21],[201,23,189,23],[201,27,189,27],[201,28,189,28,"_sessionId"],[201,38,189,38],[202,12,190,12,"maxObservedTimestamp"],[202,32,190,32],[202,34,190,34],[202,38,190,38],[202,39,190,39,"maxObservedTimestamp"],[203,10,191,10],[203,11,191,11],[203,12,191,12],[204,10,192,10],[204,14,192,16,"oldRemoteQueryResults"],[204,35,192,37],[204,38,192,40],[204,42,192,44,"Set"],[204,45,192,47],[204,46,193,12],[204,50,193,16],[204,51,193,17,"remoteQuerySet"],[204,65,193,31],[204,66,193,32,"remoteQueryResults"],[204,84,193,50],[204,85,193,51],[204,86,193,52],[204,87,193,53,"keys"],[204,91,193,57],[204,92,193,58],[204,93,194,10],[204,94,194,11],[205,10,195,10],[205,14,195,14],[205,15,195,15,"remoteQuerySet"],[205,29,195,29],[205,32,195,32],[205,36,195,36,"import_remote_query_set"],[205,59,195,59],[205,60,195,60,"RemoteQuerySet"],[205,74,195,74],[205,75,196,13,"queryId"],[205,82,196,20],[205,86,196,25],[205,90,196,29],[205,91,196,30,"state"],[205,96,196,35],[205,97,196,36,"queryPath"],[205,106,196,45],[205,107,196,46,"queryId"],[205,114,196,53],[205,115,196,54],[205,117,197,12],[205,121,197,16],[205,122,197,17,"logger"],[205,128,198,10],[205,129,198,11],[206,10,199,10],[206,14,199,10,"_this$state$restart"],[206,33,199,10],[206,36,199,59],[206,40,199,63],[206,41,199,64,"state"],[206,46,199,69],[206,47,199,70,"restart"],[206,54,199,77],[206,55,200,12,"oldRemoteQueryResults"],[206,76,201,10],[206,77,201,11],[207,12,201,11,"_this$state$restart2"],[207,32,201,11],[207,35,201,11,"_slicedToArray"],[207,49,201,11],[207,50,201,11,"_this$state$restart"],[207,69,201,11],[208,12,199,17,"querySetModification"],[208,32,199,37],[208,35,199,37,"_this$state$restart2"],[208,55,199,37],[209,12,199,39,"authModification"],[209,28,199,55],[209,31,199,55,"_this$state$restart2"],[209,51,199,55],[210,10,202,10],[210,14,202,14,"authModification"],[210,30,202,30],[210,32,202,32],[211,12,203,12],[211,16,203,16],[211,17,203,17,"webSocketManager"],[211,33,203,33],[211,34,203,34,"sendMessage"],[211,45,203,45],[211,46,203,46,"authModification"],[211,62,203,62],[211,63,203,63],[212,10,204,10],[213,10,205,10],[213,14,205,14],[213,15,205,15,"webSocketManager"],[213,31,205,31],[213,32,205,32,"sendMessage"],[213,43,205,43],[213,44,205,44,"querySetModification"],[213,64,205,64],[213,65,205,65],[214,10,206,10],[214,15,206,15],[214,19,206,21,"message"],[214,26,206,28],[214,30,206,32],[214,34,206,36],[214,35,206,37,"requestManager"],[214,49,206,51],[214,50,206,52,"restart"],[214,57,206,59],[214,58,206,60],[214,59,206,61],[214,61,206,63],[215,12,207,12],[215,16,207,16],[215,17,207,17,"webSocketManager"],[215,33,207,33],[215,34,207,34,"sendMessage"],[215,45,207,45],[215,46,207,46,"message"],[215,53,207,53],[215,54,207,54],[216,10,208,10],[217,8,209,8],[217,9,209,9],[218,8,210,8,"onResume"],[218,16,210,16],[218,18,210,18,"onResume"],[218,19,210,18],[218,24,210,24],[219,10,211,10],[219,14,211,10,"_this$state$resume"],[219,32,211,10],[219,35,211,59],[219,39,211,63],[219,40,211,64,"state"],[219,45,211,69],[219,46,211,70,"resume"],[219,52,211,76],[219,53,211,77],[219,54,211,78],[220,12,211,78,"_this$state$resume2"],[220,31,211,78],[220,34,211,78,"_slicedToArray"],[220,48,211,78],[220,49,211,78,"_this$state$resume"],[220,67,211,78],[221,12,211,17,"querySetModification"],[221,32,211,37],[221,35,211,37,"_this$state$resume2"],[221,54,211,37],[222,12,211,39,"authModification"],[222,28,211,55],[222,31,211,55,"_this$state$resume2"],[222,50,211,55],[223,10,212,10],[223,14,212,14,"authModification"],[223,30,212,30],[223,32,212,32],[224,12,213,12],[224,16,213,16],[224,17,213,17,"webSocketManager"],[224,33,213,33],[224,34,213,34,"sendMessage"],[224,45,213,45],[224,46,213,46,"authModification"],[224,62,213,62],[224,63,213,63],[225,10,214,10],[226,10,215,10],[226,14,215,14,"querySetModification"],[226,34,215,34],[226,36,215,36],[227,12,216,12],[227,16,216,16],[227,17,216,17,"webSocketManager"],[227,33,216,33],[227,34,216,34,"sendMessage"],[227,45,216,45],[227,46,216,46,"querySetModification"],[227,66,216,66],[227,67,216,67],[228,10,217,10],[229,10,218,10],[229,15,218,15],[229,19,218,21,"message"],[229,26,218,28],[229,30,218,32],[229,34,218,36],[229,35,218,37,"requestManager"],[229,49,218,51],[229,50,218,52,"resume"],[229,56,218,58],[229,57,218,59],[229,58,218,60],[229,60,218,62],[230,12,219,12],[230,16,219,16],[230,17,219,17,"webSocketManager"],[230,33,219,33],[230,34,219,34,"sendMessage"],[230,45,219,45],[230,46,219,46,"message"],[230,53,219,53],[230,54,219,54],[231,10,220,10],[232,8,221,8],[232,9,221,9],[233,8,222,8,"onMessage"],[233,17,222,17],[233,19,222,20,"serverMessage"],[233,32,222,33],[233,36,222,38],[234,10,223,10],[234,14,223,14],[234,15,223,15],[234,19,223,19],[234,20,223,20,"firstMessageReceived"],[234,40,223,40],[234,42,223,42],[235,12,224,12],[235,16,224,16],[235,17,224,17,"firstMessageReceived"],[235,37,224,37],[235,40,224,40],[235,44,224,44],[236,12,225,12],[236,16,225,16],[236,17,225,17,"mark"],[236,21,225,21],[236,22,225,22],[236,50,225,50],[236,51,225,51],[237,12,226,12],[237,16,226,16],[237,17,226,17,"reportMarks"],[237,28,226,28],[237,29,226,29],[237,30,226,30],[238,10,227,10],[239,10,228,10],[239,18,228,18,"serverMessage"],[239,31,228,31],[239,32,228,32,"type"],[239,36,228,36],[240,12,229,12],[240,17,229,17],[240,29,229,29],[241,14,229,31],[242,16,230,14],[242,20,230,18],[242,21,230,19,"observedTimestamp"],[242,38,230,36],[242,39,230,37,"serverMessage"],[242,52,230,50],[242,53,230,51,"endVersion"],[242,63,230,61],[242,64,230,62,"ts"],[242,66,230,64],[242,67,230,65],[243,16,231,14],[243,20,231,18],[243,21,231,19,"authenticationManager"],[243,42,231,40],[243,43,231,41,"onTransition"],[243,55,231,53],[243,56,231,54,"serverMessage"],[243,69,231,67],[243,70,231,68],[244,16,232,14],[244,20,232,18],[244,21,232,19,"remoteQuerySet"],[244,35,232,33],[244,36,232,34,"transition"],[244,46,232,44],[244,47,232,45,"serverMessage"],[244,60,232,58],[244,61,232,59],[245,16,233,14],[245,20,233,18],[245,21,233,19,"state"],[245,26,233,24],[245,27,233,25,"transition"],[245,37,233,35],[245,38,233,36,"serverMessage"],[245,51,233,49],[245,52,233,50],[246,16,234,14],[246,20,234,20,"completedRequests"],[246,37,234,37],[246,40,234,40],[246,44,234,44],[246,45,234,45,"requestManager"],[246,59,234,59],[246,60,234,60,"removeCompleted"],[246,75,234,75],[246,76,235,16],[246,80,235,20],[246,81,235,21,"remoteQuerySet"],[246,95,235,35],[246,96,235,36,"timestamp"],[246,105,235,45],[246,106,235,46],[246,107,236,14],[246,108,236,15],[247,16,237,14],[247,20,237,18],[247,21,237,19,"notifyOnQueryResultChanges"],[247,47,237,45],[247,48,237,46,"completedRequests"],[247,65,237,63],[247,66,237,64],[248,16,238,14],[249,14,239,12],[250,12,240,12],[250,17,240,17],[250,35,240,35],[251,14,240,37],[252,16,241,14],[252,20,241,18,"serverMessage"],[252,33,241,31],[252,34,241,32,"success"],[252,41,241,39],[252,43,241,41],[253,18,242,16],[253,22,242,20],[253,23,242,21,"observedTimestamp"],[253,40,242,38],[253,41,242,39,"serverMessage"],[253,54,242,52],[253,55,242,53,"ts"],[253,57,242,55],[253,58,242,56],[254,16,243,14],[255,16,244,14],[255,20,244,20,"completedMutationInfo"],[255,41,244,41],[255,44,244,44],[255,48,244,48],[255,49,244,49,"requestManager"],[255,63,244,63],[255,64,244,64,"onResponse"],[255,74,244,74],[255,75,244,75,"serverMessage"],[255,88,244,88],[255,89,244,89],[256,16,245,14],[256,20,245,18,"completedMutationInfo"],[256,41,245,39],[256,46,245,44],[256,50,245,48],[256,52,245,50],[257,18,246,16],[257,22,246,20],[257,23,246,21,"notifyOnQueryResultChanges"],[257,49,246,47],[257,50,247,18],[257,65,247,34],[257,69,247,38,"Map"],[257,72,247,41],[257,73,247,42],[257,74,248,20],[257,75,249,22,"completedMutationInfo"],[257,96,249,43],[257,97,249,44,"requestId"],[257,106,249,53],[257,108,250,22,"completedMutationInfo"],[257,129,250,43],[257,130,250,44,"result"],[257,136,250,50],[257,137,251,21],[257,138,252,19],[257,139,253,16],[257,140,253,17],[258,16,254,14],[259,16,255,14],[260,14,256,12],[261,12,257,12],[261,17,257,17],[261,33,257,33],[262,14,257,35],[263,16,258,14],[263,20,258,18],[263,21,258,19,"requestManager"],[263,35,258,33],[263,36,258,34,"onResponse"],[263,46,258,44],[263,47,258,45,"serverMessage"],[263,60,258,58],[263,61,258,59],[264,16,259,14],[265,14,260,12],[266,12,261,12],[266,17,261,17],[266,28,261,28],[267,14,261,30],[268,16,262,14],[268,20,262,18],[268,21,262,19,"authenticationManager"],[268,42,262,40],[268,43,262,41,"onAuthError"],[268,54,262,52],[268,55,262,53,"serverMessage"],[268,68,262,66],[268,69,262,67],[269,16,263,14],[270,14,264,12],[271,12,265,12],[271,17,265,17],[271,29,265,29],[272,14,265,31],[273,16,266,14],[273,20,266,20,"error"],[273,25,266,25],[273,28,266,28],[273,29,266,29],[273,30,266,30],[273,32,266,32,"import_logging"],[273,46,266,46],[273,47,266,47,"logFatalError"],[273,60,266,60],[273,62,266,62],[273,66,266,66],[273,67,266,67,"logger"],[273,73,266,73],[273,75,266,75,"serverMessage"],[273,88,266,88],[273,89,266,89,"error"],[273,94,266,94],[273,95,266,95],[274,16,267,14],[274,21,267,19],[274,25,267,23],[274,26,267,24,"webSocketManager"],[274,42,267,40],[274,43,267,41,"terminate"],[274,52,267,50],[274,53,267,51],[274,54,267,52],[275,16,268,14],[275,22,268,20,"error"],[275,27,268,25],[276,14,269,12],[277,12,270,12],[277,17,270,17],[277,23,270,23],[278,14,271,14],[279,12,272,12],[280,12,273,12],[281,14,273,21],[282,16,274,14,"serverMessage"],[282,29,274,27],[283,14,275,12],[284,10,276,10],[285,10,277,10],[285,17,277,17],[286,12,278,12,"hasSyncedPastLastReconnect"],[286,38,278,38],[286,40,278,40],[286,44,278,44],[286,45,278,45,"hasSyncedPastLastReconnect"],[286,71,278,71],[286,72,278,72],[287,10,279,10],[287,11,279,11],[288,8,280,8],[288,9,280,9],[289,8,281,8,"onServerDisconnectError"],[289,31,281,31],[289,33,281,33,"options"],[289,40,281,40],[289,41,281,41,"onServerDisconnectError"],[290,6,282,6],[290,7,282,7],[290,9,283,6,"webSocketConstructor"],[290,29,283,26],[290,31,284,6],[290,35,284,10],[290,36,284,11,"logger"],[290,42,284,17],[290,44,285,6],[290,48,285,10],[290,49,285,11,"markConnectionStateDirty"],[290,73,285,35],[290,75,286,6],[290,79,286,10],[290,80,286,11,"debug"],[290,85,287,4],[290,86,287,5],[291,6,288,4],[291,10,288,8],[291,11,288,9,"mark"],[291,15,288,13],[291,16,288,14],[291,41,288,39],[291,42,288,40],[292,6,289,4],[292,10,289,8,"options"],[292,17,289,15],[292,18,289,16,"expectAuth"],[292,28,289,26],[292,30,289,28],[293,8,290,6,"pauseSocket"],[293,19,290,17],[293,20,290,18],[293,21,290,19],[294,6,291,4],[295,4,292,2],[296,4,293,2],[297,0,294,0],[298,0,295,0],[299,0,296,0],[300,0,297,0],[301,4,293,2],[301,11,293,2,"_createClass"],[301,23,293,2],[301,24,293,2,"BaseConvexClient"],[301,40,293,2],[302,6,293,2,"key"],[302,9,293,2],[303,6,293,2,"value"],[303,11,293,2],[303,13,298,2],[303,22,298,2,"hasSyncedPastLastReconnect"],[303,48,298,28,"hasSyncedPastLastReconnect"],[303,49,298,28],[303,51,298,31],[304,8,299,4],[304,12,299,10,"hasSyncedPastLastReconnect"],[304,38,299,36],[304,41,299,39],[304,45,299,43],[304,46,299,44,"requestManager"],[304,60,299,58],[304,61,299,59,"hasSyncedPastLastReconnect"],[304,87,299,85],[304,88,299,86],[304,89,299,87],[304,93,299,91],[304,97,299,95],[304,98,299,96,"state"],[304,103,299,101],[304,104,299,102,"hasSyncedPastLastReconnect"],[304,130,299,128],[304,131,299,129],[304,132,299,130],[305,8,300,4],[305,15,300,11,"hasSyncedPastLastReconnect"],[305,41,300,37],[306,6,301,2],[307,4,301,3],[308,6,301,3,"key"],[308,9,301,3],[309,6,301,3,"value"],[309,11,301,3],[309,13,302,2],[309,22,302,2,"observedTimestamp"],[309,39,302,19,"observedTimestamp"],[309,40,302,20,"observedTs"],[309,50,302,30],[309,52,302,32],[310,8,303,4],[310,12,303,8],[310,16,303,12],[310,17,303,13,"maxObservedTimestamp"],[310,37,303,33],[310,42,303,38],[310,47,303,43],[310,48,303,44],[310,52,303,48],[310,56,303,52],[310,57,303,53,"maxObservedTimestamp"],[310,77,303,73],[310,78,303,74,"lessThanOrEqual"],[310,93,303,89],[310,94,303,90,"observedTs"],[310,104,303,100],[310,105,303,101],[310,107,303,103],[311,10,304,6],[311,14,304,10],[311,15,304,11,"maxObservedTimestamp"],[311,35,304,31],[311,38,304,34,"observedTs"],[311,48,304,44],[312,8,305,4],[313,6,306,2],[314,4,306,3],[315,6,306,3,"key"],[315,9,306,3],[316,6,306,3,"value"],[316,11,306,3],[316,13,307,2],[316,22,307,2,"getMaxObservedTimestamp"],[316,45,307,25,"getMaxObservedTimestamp"],[316,46,307,25],[316,48,307,28],[317,8,308,4],[317,15,308,11],[317,19,308,15],[317,20,308,16,"maxObservedTimestamp"],[317,40,308,36],[318,6,309,2],[319,6,310,2],[320,0,311,0],[321,0,312,0],[322,0,313,0],[323,0,314,0],[324,0,315,0],[325,0,316,0],[326,0,317,0],[327,4,310,2],[328,6,310,2,"key"],[328,9,310,2],[329,6,310,2,"value"],[329,11,310,2],[329,13,318,2],[329,22,318,2,"notifyOnQueryResultChanges"],[329,48,318,28,"notifyOnQueryResultChanges"],[329,49,318,29,"completedRequests"],[329,66,318,46],[329,68,318,48],[330,8,319,4],[330,12,319,10,"remoteQueryResults"],[330,30,319,28],[330,33,319,31],[330,37,319,35],[330,38,319,36,"remoteQuerySet"],[330,52,319,50],[330,53,319,51,"remoteQueryResults"],[330,71,319,69],[330,72,319,70],[330,73,319,71],[331,8,320,4],[331,12,320,10,"queryTokenToValue"],[331,29,320,27],[331,32,320,30],[331,47,320,46],[331,51,320,50,"Map"],[331,54,320,53],[331,55,320,54],[331,56,320,55],[332,8,321,4],[332,17,321,4,"_ref"],[332,21,321,4],[332,25,321,36,"remoteQueryResults"],[332,43,321,54],[332,45,321,56],[333,10,321,56],[333,14,321,56,"_ref2"],[333,19,321,56],[333,22,321,56,"_slicedToArray"],[333,36,321,56],[333,37,321,56,"_ref"],[333,41,321,56],[334,10,321,56],[334,14,321,16,"queryId"],[334,21,321,23],[334,24,321,23,"_ref2"],[334,29,321,23],[335,10,321,23],[335,14,321,25,"result"],[335,20,321,31],[335,23,321,31,"_ref2"],[335,28,321,31],[336,10,322,6],[336,14,322,12,"queryToken"],[336,24,322,22],[336,27,322,25],[336,31,322,29],[336,32,322,30,"state"],[336,37,322,35],[336,38,322,36,"queryToken"],[336,48,322,46],[336,49,322,47,"queryId"],[336,56,322,54],[336,57,322,55],[337,10,323,6],[337,14,323,10,"queryToken"],[337,24,323,20],[337,29,323,25],[337,33,323,29],[337,35,323,31],[338,12,324,8],[338,16,324,14,"query"],[338,21,324,19],[338,24,324,22],[339,14,325,10,"result"],[339,20,325,16],[340,14,326,10,"udfPath"],[340,21,326,17],[340,23,326,19],[340,27,326,23],[340,28,326,24,"state"],[340,33,326,29],[340,34,326,30,"queryPath"],[340,43,326,39],[340,44,326,40,"queryId"],[340,51,326,47],[340,52,326,48],[341,14,327,10,"args"],[341,18,327,14],[341,20,327,16],[341,24,327,20],[341,25,327,21,"state"],[341,30,327,26],[341,31,327,27,"queryArgs"],[341,40,327,36],[341,41,327,37,"queryId"],[341,48,327,44],[342,12,328,8],[342,13,328,9],[343,12,329,8,"queryTokenToValue"],[343,29,329,25],[343,30,329,26,"set"],[343,33,329,29],[343,34,329,30,"queryToken"],[343,44,329,40],[343,46,329,42,"query"],[343,51,329,47],[343,52,329,48],[344,10,330,6],[345,8,331,4],[346,8,332,4],[346,12,332,10,"changedQueryTokens"],[346,30,332,28],[346,33,332,31],[346,37,332,35],[346,38,332,36,"optimisticQueryResults"],[346,60,332,58],[346,61,332,59,"ingestQueryResultsFromServer"],[346,89,332,87],[346,90,333,6,"queryTokenToValue"],[346,107,333,23],[346,109,334,6],[346,113,334,10,"Set"],[346,116,334,13],[346,117,334,14,"completedRequests"],[346,134,334,31],[346,135,334,32,"keys"],[346,139,334,36],[346,140,334,37],[346,141,334,38],[346,142,335,4],[346,143,335,5],[347,8,336,4],[347,12,336,8],[347,13,336,9,"handleTransition"],[347,29,336,25],[347,30,336,26],[348,10,337,6,"queries"],[348,17,337,13],[348,19,337,15,"changedQueryTokens"],[348,37,337,33],[348,38,337,34,"map"],[348,41,337,37],[348,42,337,39,"token"],[348,47,337,44],[348,51,337,49],[349,12,338,8],[349,16,338,14,"optimisticResult"],[349,32,338,30],[349,35,338,33],[349,39,338,37],[349,40,338,38,"optimisticQueryResults"],[349,62,338,60],[349,63,338,61,"rawQueryResult"],[349,77,338,75],[349,78,338,76,"token"],[349,83,338,81],[349,84,338,82],[350,12,339,8],[350,19,339,15],[351,14,340,10,"token"],[351,19,340,15],[352,14,341,10,"modification"],[352,26,341,22],[352,28,341,24],[353,16,342,12,"kind"],[353,20,342,16],[353,22,342,18],[353,31,342,27],[354,16,343,12,"result"],[354,22,343,18],[354,24,343,20,"optimisticResult"],[354,40,343,36],[354,41,343,37,"result"],[355,14,344,10],[356,12,345,8],[356,13,345,9],[357,10,346,6],[357,11,346,7],[357,12,346,8],[358,10,347,6,"reflectedMutations"],[358,28,347,24],[358,30,347,26,"Array"],[358,35,347,31],[358,36,347,32,"from"],[358,40,347,36],[358,41,347,37,"completedRequests"],[358,58,347,54],[358,59,347,55],[358,60,347,56,"map"],[358,63,347,59],[358,64,348,8,"_ref3"],[358,69,348,8],[359,12,348,8],[359,16,348,8,"_ref4"],[359,21,348,8],[359,24,348,8,"_slicedToArray"],[359,38,348,8],[359,39,348,8,"_ref3"],[359,44,348,8],[360,14,348,10,"requestId"],[360,23,348,19],[360,26,348,19,"_ref4"],[360,31,348,19],[361,14,348,21,"result"],[361,20,348,27],[361,23,348,27,"_ref4"],[361,28,348,27],[362,12,348,27],[362,19,348,34],[363,14,349,10,"requestId"],[363,23,349,19],[364,14,350,10,"result"],[365,12,351,8],[365,13,351,9],[366,10,351,9],[366,11,352,6],[366,12,352,7],[367,10,353,6,"timestamp"],[367,19,353,15],[367,21,353,17],[367,25,353,21],[367,26,353,22,"remoteQuerySet"],[367,40,353,36],[367,41,353,37,"timestamp"],[367,50,353,46],[367,51,353,47],[368,8,354,4],[368,9,354,5],[368,10,354,6],[369,6,355,2],[370,4,355,3],[371,6,355,3,"key"],[371,9,355,3],[372,6,355,3,"value"],[372,11,355,3],[372,13,356,2],[372,22,356,2,"handleTransition"],[372,38,356,18,"handleTransition"],[372,39,356,19,"transition"],[372,49,356,29],[372,51,356,31],[373,8,357,4],[373,13,357,9],[373,17,357,15,"fn"],[373,19,357,17],[373,23,357,21],[373,27,357,25],[373,28,357,26,"_onTransitionFns"],[373,44,357,42],[373,45,357,43,"values"],[373,51,357,49],[373,52,357,50],[373,53,357,51],[373,55,357,53],[374,10,358,6,"fn"],[374,12,358,8],[374,13,358,9,"transition"],[374,23,358,19],[374,24,358,20],[375,8,359,4],[376,6,360,2],[377,6,361,2],[378,0,362,0],[379,0,363,0],[380,0,364,0],[381,0,365,0],[382,0,366,0],[383,0,367,0],[384,0,368,0],[385,0,369,0],[386,4,361,2],[387,6,361,2,"key"],[387,9,361,2],[388,6,361,2,"value"],[388,11,361,2],[388,13,370,2],[388,22,370,2,"addOnTransitionHandler"],[388,44,370,24,"addOnTransitionHandler"],[388,45,370,25,"fn"],[388,47,370,27],[388,49,370,29],[389,8,371,4],[389,12,371,10,"id"],[389,14,371,12],[389,17,371,15],[389,21,371,19],[389,22,371,20,"_transitionHandlerCounter"],[389,47,371,45],[389,49,371,47],[390,8,372,4],[390,12,372,8],[390,13,372,9,"_onTransitionFns"],[390,29,372,25],[390,30,372,26,"set"],[390,33,372,29],[390,34,372,30,"id"],[390,36,372,32],[390,38,372,34,"fn"],[390,40,372,36],[390,41,372,37],[391,8,373,4],[391,15,373,11],[391,21,373,17],[391,25,373,21],[391,26,373,22,"_onTransitionFns"],[391,42,373,38],[391,43,373,39,"delete"],[391,49,373,45],[391,50,373,46,"id"],[391,52,373,48],[391,53,373,49],[392,6,374,2],[393,6,375,2],[394,0,376,0],[395,0,377,0],[396,0,378,0],[397,0,379,0],[398,0,380,0],[399,0,381,0],[400,0,382,0],[401,4,375,2],[402,6,375,2,"key"],[402,9,375,2],[403,6,375,2,"value"],[403,11,375,2],[403,13,383,2],[403,22,383,2,"setAuth"],[403,29,383,9,"setAuth"],[403,30,383,10,"fetchToken"],[403,40,383,20],[403,42,383,22,"onChange"],[403,50,383,30],[403,52,383,32],[404,8,384,4],[404,13,384,9],[404,17,384,13],[404,18,384,14,"authenticationManager"],[404,39,384,35],[404,40,384,36,"setConfig"],[404,49,384,45],[404,50,384,46,"fetchToken"],[404,60,384,56],[404,62,384,58,"onChange"],[404,70,384,66],[404,71,384,67],[405,6,385,2],[406,4,385,3],[407,6,385,3,"key"],[407,9,385,3],[408,6,385,3,"value"],[408,11,385,3],[408,13,386,2],[408,22,386,2,"hasAuth"],[408,29,386,9,"hasAuth"],[408,30,386,9],[408,32,386,12],[409,8,387,4],[409,15,387,11],[409,19,387,15],[409,20,387,16,"state"],[409,25,387,21],[409,26,387,22,"hasAuth"],[409,33,387,29],[409,34,387,30],[409,35,387,31],[410,6,388,2],[411,6,389,2],[412,4,389,2],[413,6,389,2,"key"],[413,9,389,2],[414,6,389,2,"value"],[414,11,389,2],[414,13,390,2],[414,22,390,2,"setAdminAuth"],[414,34,390,14,"setAdminAuth"],[414,35,390,15,"value"],[414,40,390,20],[414,42,390,22,"fakeUserIdentity"],[414,58,390,38],[414,60,390,40],[415,8,391,4],[415,12,391,10,"message"],[415,19,391,17],[415,22,391,20],[415,26,391,24],[415,27,391,25,"state"],[415,32,391,30],[415,33,391,31,"setAdminAuth"],[415,45,391,43],[415,46,391,44,"value"],[415,51,391,49],[415,53,391,51,"fakeUserIdentity"],[415,69,391,67],[415,70,391,68],[416,8,392,4],[416,12,392,8],[416,13,392,9,"webSocketManager"],[416,29,392,25],[416,30,392,26,"sendMessage"],[416,41,392,37],[416,42,392,38,"message"],[416,49,392,45],[416,50,392,46],[417,6,393,2],[418,4,393,3],[419,6,393,3,"key"],[419,9,393,3],[420,6,393,3,"value"],[420,11,393,3],[420,13,394,2],[420,22,394,2,"clearAuth"],[420,31,394,11,"clearAuth"],[420,32,394,11],[420,34,394,14],[421,8,395,4],[421,12,395,10,"message"],[421,19,395,17],[421,22,395,20],[421,26,395,24],[421,27,395,25,"state"],[421,32,395,30],[421,33,395,31,"clearAuth"],[421,42,395,40],[421,43,395,41],[421,44,395,42],[422,8,396,4],[422,12,396,8],[422,13,396,9,"webSocketManager"],[422,29,396,25],[422,30,396,26,"sendMessage"],[422,41,396,37],[422,42,396,38,"message"],[422,49,396,45],[422,50,396,46],[423,6,397,2],[424,6,398,2],[425,0,399,0],[426,0,400,0],[427,0,401,0],[428,0,402,0],[429,0,403,0],[430,0,404,0],[431,0,405,0],[432,0,406,0],[433,0,407,0],[434,0,408,0],[435,0,409,0],[436,0,410,0],[437,0,411,0],[438,4,398,2],[439,6,398,2,"key"],[439,9,398,2],[440,6,398,2,"value"],[440,11,398,2],[440,13,412,2],[440,22,412,2,"subscribe"],[440,31,412,11,"subscribe"],[440,32,412,12,"name"],[440,36,412,16],[440,38,412,18,"args"],[440,42,412,22],[440,44,412,24,"options"],[440,51,412,31],[440,53,412,33],[441,8,413,4],[441,12,413,10,"argsObject"],[441,22,413,20],[441,25,413,23],[441,26,413,24],[441,27,413,25],[441,29,413,27,"import_common"],[441,42,413,40],[441,43,413,41,"parseArgs"],[441,52,413,50],[441,54,413,52,"args"],[441,58,413,56],[441,59,413,57],[442,8,414,4],[442,12,414,4,"_this$state$subscribe"],[442,33,414,4],[442,36,414,54],[442,40,414,58],[442,41,414,59,"state"],[442,46,414,64],[442,47,414,65,"subscribe"],[442,56,414,74],[442,57,415,6,"name"],[442,61,415,10],[442,63,416,6,"argsObject"],[442,73,416,16],[442,75,417,6,"options"],[442,82,417,13],[442,84,417,15,"journal"],[442,91,417,22],[442,93,418,6,"options"],[442,100,418,13],[442,102,418,15,"componentPath"],[442,115,419,4],[442,116,419,5],[443,10,414,12,"modification"],[443,22,414,24],[443,25,414,24,"_this$state$subscribe"],[443,46,414,24],[443,47,414,12,"modification"],[443,59,414,24],[444,10,414,26,"queryToken"],[444,20,414,36],[444,23,414,36,"_this$state$subscribe"],[444,44,414,36],[444,45,414,26,"queryToken"],[444,55,414,36],[445,10,414,38,"unsubscribe"],[445,21,414,49],[445,24,414,49,"_this$state$subscribe"],[445,45,414,49],[445,46,414,38,"unsubscribe"],[445,57,414,49],[446,8,420,4],[446,12,420,8,"modification"],[446,24,420,20],[446,29,420,25],[446,33,420,29],[446,35,420,31],[447,10,421,6],[447,14,421,10],[447,15,421,11,"webSocketManager"],[447,31,421,27],[447,32,421,28,"sendMessage"],[447,43,421,39],[447,44,421,40,"modification"],[447,56,421,52],[447,57,421,53],[448,8,422,4],[449,8,423,4],[449,15,423,11],[450,10,424,6,"queryToken"],[450,20,424,16],[451,10,425,6,"unsubscribe"],[451,21,425,17],[451,23,425,19,"unsubscribe"],[451,24,425,19],[451,29,425,25],[452,12,426,8],[452,16,426,14,"modification2"],[452,29,426,27],[452,32,426,30,"unsubscribe"],[452,43,426,41],[452,44,426,42],[452,45,426,43],[453,12,427,8],[453,16,427,12,"modification2"],[453,29,427,25],[453,31,427,27],[454,14,428,10],[454,18,428,14],[454,19,428,15,"webSocketManager"],[454,35,428,31],[454,36,428,32,"sendMessage"],[454,47,428,43],[454,48,428,44,"modification2"],[454,61,428,57],[454,62,428,58],[455,12,429,8],[456,10,430,6],[457,8,431,4],[457,9,431,5],[458,6,432,2],[459,6,433,2],[460,0,434,0],[461,0,435,0],[462,0,436,0],[463,0,437,0],[464,0,438,0],[465,4,433,2],[466,6,433,2,"key"],[466,9,433,2],[467,6,433,2,"value"],[467,11,433,2],[467,13,439,2],[467,22,439,2,"localQueryResult"],[467,38,439,18,"localQueryResult"],[467,39,439,19,"udfPath"],[467,46,439,26],[467,48,439,28,"args"],[467,52,439,32],[467,54,439,34],[468,8,440,4],[468,12,440,10,"argsObject"],[468,22,440,20],[468,25,440,23],[468,26,440,24],[468,27,440,25],[468,29,440,27,"import_common"],[468,42,440,40],[468,43,440,41,"parseArgs"],[468,52,440,50],[468,54,440,52,"args"],[468,58,440,56],[468,59,440,57],[469,8,441,4],[469,12,441,10,"queryToken"],[469,22,441,20],[469,25,441,23],[469,26,441,24],[469,27,441,25],[469,29,441,27,"import_udf_path_utils"],[469,50,441,48],[469,51,441,49,"serializePathAndArgs"],[469,71,441,69],[469,73,441,71,"udfPath"],[469,80,441,78],[469,82,441,80,"argsObject"],[469,92,441,90],[469,93,441,91],[470,8,442,4],[470,15,442,11],[470,19,442,15],[470,20,442,16,"optimisticQueryResults"],[470,42,442,38],[470,43,442,39,"queryResult"],[470,54,442,50],[470,55,442,51,"queryToken"],[470,65,442,61],[470,66,442,62],[471,6,443,2],[472,6,444,2],[473,0,445,0],[474,0,446,0],[475,0,447,0],[476,0,448,0],[477,0,449,0],[478,0,450,0],[479,0,451,0],[480,4,444,2],[481,6,444,2,"key"],[481,9,444,2],[482,6,444,2,"value"],[482,11,444,2],[482,13,452,2],[482,22,452,2,"localQueryResultByToken"],[482,45,452,25,"localQueryResultByToken"],[482,46,452,26,"queryToken"],[482,56,452,36],[482,58,452,38],[483,8,453,4],[483,15,453,11],[483,19,453,15],[483,20,453,16,"optimisticQueryResults"],[483,42,453,38],[483,43,453,39,"queryResult"],[483,54,453,50],[483,55,453,51,"queryToken"],[483,65,453,61],[483,66,453,62],[484,6,454,2],[485,6,455,2],[486,0,456,0],[487,0,457,0],[488,0,458,0],[489,0,459,0],[490,0,460,0],[491,0,461,0],[492,4,455,2],[493,6,455,2,"key"],[493,9,455,2],[494,6,455,2,"value"],[494,11,455,2],[494,13,462,2],[494,22,462,2,"hasLocalQueryResultByToken"],[494,48,462,28,"hasLocalQueryResultByToken"],[494,49,462,29,"queryToken"],[494,59,462,39],[494,61,462,41],[495,8,463,4],[495,15,463,11],[495,19,463,15],[495,20,463,16,"optimisticQueryResults"],[495,42,463,38],[495,43,463,39,"hasQueryResult"],[495,57,463,53],[495,58,463,54,"queryToken"],[495,68,463,64],[495,69,463,65],[496,6,464,2],[497,6,465,2],[498,0,466,0],[499,0,467,0],[500,4,465,2],[501,6,465,2,"key"],[501,9,465,2],[502,6,465,2,"value"],[502,11,465,2],[502,13,468,2],[502,22,468,2,"localQueryLogs"],[502,36,468,16,"localQueryLogs"],[502,37,468,17,"udfPath"],[502,44,468,24],[502,46,468,26,"args"],[502,50,468,30],[502,52,468,32],[503,8,469,4],[503,12,469,10,"argsObject"],[503,22,469,20],[503,25,469,23],[503,26,469,24],[503,27,469,25],[503,29,469,27,"import_common"],[503,42,469,40],[503,43,469,41,"parseArgs"],[503,52,469,50],[503,54,469,52,"args"],[503,58,469,56],[503,59,469,57],[504,8,470,4],[504,12,470,10,"queryToken"],[504,22,470,20],[504,25,470,23],[504,26,470,24],[504,27,470,25],[504,29,470,27,"import_udf_path_utils"],[504,50,470,48],[504,51,470,49,"serializePathAndArgs"],[504,71,470,69],[504,73,470,71,"udfPath"],[504,80,470,78],[504,82,470,80,"argsObject"],[504,92,470,90],[504,93,470,91],[505,8,471,4],[505,15,471,11],[505,19,471,15],[505,20,471,16,"optimisticQueryResults"],[505,42,471,38],[505,43,471,39,"queryLogs"],[505,52,471,48],[505,53,471,49,"queryToken"],[505,63,471,59],[505,64,471,60],[506,6,472,2],[507,6,473,2],[508,0,474,0],[509,0,475,0],[510,0,476,0],[511,0,477,0],[512,0,478,0],[513,0,479,0],[514,0,480,0],[515,0,481,0],[516,4,473,2],[517,6,473,2,"key"],[517,9,473,2],[518,6,473,2,"value"],[518,11,473,2],[518,13,482,2],[518,22,482,2,"queryJournal"],[518,34,482,14,"queryJournal"],[518,35,482,15,"name"],[518,39,482,19],[518,41,482,21,"args"],[518,45,482,25],[518,47,482,27],[519,8,483,4],[519,12,483,10,"argsObject"],[519,22,483,20],[519,25,483,23],[519,26,483,24],[519,27,483,25],[519,29,483,27,"import_common"],[519,42,483,40],[519,43,483,41,"parseArgs"],[519,52,483,50],[519,54,483,52,"args"],[519,58,483,56],[519,59,483,57],[520,8,484,4],[520,12,484,10,"queryToken"],[520,22,484,20],[520,25,484,23],[520,26,484,24],[520,27,484,25],[520,29,484,27,"import_udf_path_utils"],[520,50,484,48],[520,51,484,49,"serializePathAndArgs"],[520,71,484,69],[520,73,484,71,"name"],[520,77,484,75],[520,79,484,77,"argsObject"],[520,89,484,87],[520,90,484,88],[521,8,485,4],[521,15,485,11],[521,19,485,15],[521,20,485,16,"state"],[521,25,485,21],[521,26,485,22,"queryJournal"],[521,38,485,34],[521,39,485,35,"queryToken"],[521,49,485,45],[521,50,485,46],[522,6,486,2],[523,6,487,2],[524,0,488,0],[525,0,489,0],[526,0,490,0],[527,0,491,0],[528,0,492,0],[529,4,487,2],[530,6,487,2,"key"],[530,9,487,2],[531,6,487,2,"value"],[531,11,487,2],[531,13,493,2],[531,22,493,2,"connectionState"],[531,37,493,17,"connectionState"],[531,38,493,17],[531,40,493,20],[532,8,494,4],[532,12,494,10,"wsConnectionState"],[532,29,494,27],[532,32,494,30],[532,36,494,34],[532,37,494,35,"webSocketManager"],[532,53,494,51],[532,54,494,52,"connectionState"],[532,69,494,67],[532,70,494,68],[532,71,494,69],[533,8,495,4],[533,15,495,11],[534,10,496,6,"hasInflightRequests"],[534,29,496,25],[534,31,496,27],[534,35,496,31],[534,36,496,32,"requestManager"],[534,50,496,46],[534,51,496,47,"hasInflightRequests"],[534,70,496,66],[534,71,496,67],[534,72,496,68],[535,10,497,6,"isWebSocketConnected"],[535,30,497,26],[535,32,497,28,"wsConnectionState"],[535,49,497,45],[535,50,497,46,"isConnected"],[535,61,497,57],[536,10,498,6,"hasEverConnected"],[536,26,498,22],[536,28,498,24,"wsConnectionState"],[536,45,498,41],[536,46,498,42,"hasEverConnected"],[536,62,498,58],[537,10,499,6,"connectionCount"],[537,25,499,21],[537,27,499,23,"wsConnectionState"],[537,44,499,40],[537,45,499,41,"connectionCount"],[537,60,499,56],[538,10,500,6,"connectionRetries"],[538,27,500,23],[538,29,500,25,"wsConnectionState"],[538,46,500,42],[538,47,500,43,"connectionRetries"],[538,64,500,60],[539,10,501,6,"timeOfOldestInflightRequest"],[539,37,501,33],[539,39,501,35],[539,43,501,39],[539,44,501,40,"requestManager"],[539,58,501,54],[539,59,501,55,"timeOfOldestInflightRequest"],[539,86,501,82],[539,87,501,83],[539,88,501,84],[540,10,502,6,"inflightMutations"],[540,27,502,23],[540,29,502,25],[540,33,502,29],[540,34,502,30,"requestManager"],[540,48,502,44],[540,49,502,45,"inflightMutations"],[540,66,502,62],[540,67,502,63],[540,68,502,64],[541,10,503,6,"inflightActions"],[541,25,503,21],[541,27,503,23],[541,31,503,27],[541,32,503,28,"requestManager"],[541,46,503,42],[541,47,503,43,"inflightActions"],[541,62,503,58],[541,63,503,59],[542,8,504,4],[542,9,504,5],[543,6,505,2],[544,6,506,2],[545,0,507,0],[546,0,508,0],[547,0,509,0],[548,0,510,0],[549,0,511,0],[550,0,512,0],[551,0,513,0],[552,0,514,0],[553,0,515,0],[554,4,506,2],[555,6,506,2,"key"],[555,9,506,2],[556,6,506,2,"value"],[556,11,506,2],[556,13,516,2],[556,22,516,2,"subscribeToConnectionState"],[556,48,516,28,"subscribeToConnectionState"],[556,49,516,29,"cb"],[556,51,516,31],[556,53,516,33],[557,8,517,4],[557,12,517,10,"id"],[557,14,517,12],[557,17,517,15],[557,21,517,19],[557,22,517,20,"nextConnectionStateSubscriberId"],[557,53,517,51],[557,55,517,53],[558,8,518,4],[558,12,518,8],[558,13,518,9,"connectionStateSubscribers"],[558,39,518,35],[558,40,518,36,"set"],[558,43,518,39],[558,44,518,40,"id"],[558,46,518,42],[558,48,518,44,"cb"],[558,50,518,46],[558,51,518,47],[559,8,519,4],[559,15,519,11],[559,21,519,17],[560,10,520,6],[560,14,520,10],[560,15,520,11,"connectionStateSubscribers"],[560,41,520,37],[560,42,520,38,"delete"],[560,48,520,44],[560,49,520,45,"id"],[560,51,520,47],[560,52,520,48],[561,8,521,4],[561,9,521,5],[562,6,522,2],[563,6,523,2],[564,0,524,0],[565,0,525,0],[566,0,526,0],[567,0,527,0],[568,0,528,0],[569,0,529,0],[570,0,530,0],[571,0,531,0],[572,0,532,0],[573,4,523,2],[574,6,523,2,"key"],[574,9,523,2],[575,6,523,2,"value"],[575,11,523,2],[576,8,523,2],[576,12,523,2,"_mutation"],[576,21,523,2],[576,24,523,2,"_asyncToGenerator"],[576,41,523,2],[576,42,533,2],[576,53,533,17,"name"],[576,57,533,21],[576,59,533,23,"args"],[576,63,533,27],[576,65,533,29,"options"],[576,72,533,36],[576,74,533,38],[577,10,534,4],[577,14,534,10,"result"],[577,20,534,16],[577,29,534,25],[577,33,534,29],[577,34,534,30,"mutationInternal"],[577,50,534,46],[577,51,534,47,"name"],[577,55,534,51],[577,57,534,53,"args"],[577,61,534,57],[577,63,534,59,"options"],[577,70,534,66],[577,71,534,67],[578,10,535,4],[578,14,535,8],[578,15,535,9,"result"],[578,21,535,15],[578,22,535,16,"success"],[578,29,535,23],[578,31,535,25],[579,12,536,6],[579,16,536,10,"result"],[579,22,536,16],[579,23,536,17,"errorData"],[579,32,536,26],[579,37,536,31],[579,42,536,36],[579,43,536,37],[579,45,536,39],[580,14,537,8],[580,20,537,14],[580,21,537,15],[580,22,537,16],[580,24,537,18,"import_logging"],[580,38,537,32],[580,39,537,33,"forwardData"],[580,50,537,44],[580,52,538,10,"result"],[580,58,538,16],[580,60,539,10],[580,64,539,14,"import_errors"],[580,77,539,27],[580,78,539,28,"ConvexError"],[580,89,539,39],[580,90,540,12],[580,91,540,13],[580,92,540,14],[580,94,540,16,"import_logging"],[580,108,540,30],[580,109,540,31,"createHybridErrorStacktrace"],[580,136,540,58],[580,138,540,60],[580,148,540,70],[580,150,540,72,"name"],[580,154,540,76],[580,156,540,78,"result"],[580,162,540,84],[580,163,541,10],[580,164,542,8],[580,165,542,9],[581,12,543,6],[582,12,544,6],[582,18,544,12],[582,22,544,16,"Error"],[582,27,544,21],[582,28,544,22],[582,29,544,23],[582,30,544,24],[582,32,544,26,"import_logging"],[582,46,544,40],[582,47,544,41,"createHybridErrorStacktrace"],[582,74,544,68],[582,76,544,70],[582,86,544,80],[582,88,544,82,"name"],[582,92,544,86],[582,94,544,88,"result"],[582,100,544,94],[582,101,544,95],[582,102,544,96],[583,10,545,4],[584,10,546,4],[584,17,546,11,"result"],[584,23,546,17],[584,24,546,18,"value"],[584,29,546,23],[585,8,547,2],[585,9,547,3],[586,8,547,3],[586,17,533,8,"mutation"],[586,25,533,16,"mutation"],[586,26,533,16,"_x"],[586,28,533,16],[586,30,533,16,"_x2"],[586,33,533,16],[586,35,533,16,"_x3"],[586,38,533,16],[587,10,533,16],[587,17,533,16,"_mutation"],[587,26,533,16],[587,27,533,16,"apply"],[587,32,533,16],[587,39,533,16,"arguments"],[587,48,533,16],[588,8,533,16],[589,8,533,16],[589,15,533,8,"mutation"],[589,23,533,16],[590,6,533,16],[591,6,548,2],[592,0,549,0],[593,0,550,0],[594,6,548,2],[595,4,548,2],[596,6,548,2,"key"],[596,9,548,2],[597,6,548,2,"value"],[597,11,548,2],[598,8,548,2],[598,12,548,2,"_mutationInternal"],[598,29,548,2],[598,32,548,2,"_asyncToGenerator"],[598,49,548,2],[598,50,551,2],[598,61,551,25,"udfPath"],[598,68,551,32],[598,70,551,34,"args"],[598,74,551,38],[598,76,551,40,"options"],[598,83,551,47],[598,85,551,49,"componentPath"],[598,98,551,62],[598,100,551,64],[599,10,552,4],[599,14,552,4,"_this$enqueueMutation"],[599,35,552,4],[599,38,552,32],[599,42,552,36],[599,43,552,37,"enqueueMutation"],[599,58,552,52],[599,59,553,6,"udfPath"],[599,66,553,13],[599,68,554,6,"args"],[599,72,554,10],[599,74,555,6,"options"],[599,81,555,13],[599,83,556,6,"componentPath"],[599,96,557,4],[599,97,557,5],[600,12,552,12,"mutationPromise"],[600,27,552,27],[600,30,552,27,"_this$enqueueMutation"],[600,51,552,27],[600,52,552,12,"mutationPromise"],[600,67,552,27],[601,10,558,4],[601,17,558,11,"mutationPromise"],[601,32,558,26],[602,8,559,2],[602,9,559,3],[603,8,559,3],[603,17,551,8,"mutationInternal"],[603,33,551,24,"mutationInternal"],[603,34,551,24,"_x4"],[603,37,551,24],[603,39,551,24,"_x5"],[603,42,551,24],[603,44,551,24,"_x6"],[603,47,551,24],[603,49,551,24,"_x7"],[603,52,551,24],[604,10,551,24],[604,17,551,24,"_mutationInternal"],[604,34,551,24],[604,35,551,24,"apply"],[604,40,551,24],[604,47,551,24,"arguments"],[604,56,551,24],[605,8,551,24],[606,8,551,24],[606,15,551,8,"mutationInternal"],[606,31,551,24],[607,6,551,24],[608,6,560,2],[609,0,561,0],[610,0,562,0],[611,6,560,2],[612,4,560,2],[613,6,560,2,"key"],[613,9,560,2],[614,6,560,2,"value"],[614,11,560,2],[614,13,563,2],[614,22,563,2,"enqueueMutation"],[614,37,563,17,"enqueueMutation"],[614,38,563,18,"udfPath"],[614,45,563,25],[614,47,563,27,"args"],[614,51,563,31],[614,53,563,33,"options"],[614,60,563,40],[614,62,563,42,"componentPath"],[614,75,563,55],[614,77,563,57],[615,8,564,4],[615,12,564,10,"mutationArgs"],[615,24,564,22],[615,27,564,25],[615,28,564,26],[615,29,564,27],[615,31,564,29,"import_common"],[615,44,564,42],[615,45,564,43,"parseArgs"],[615,54,564,52],[615,56,564,54,"args"],[615,60,564,58],[615,61,564,59],[616,8,565,4],[616,12,565,8],[616,13,565,9,"tryReportLongDisconnect"],[616,36,565,32],[616,37,565,33],[616,38,565,34],[617,8,566,4],[617,12,566,10,"requestId"],[617,21,566,19],[617,24,566,22],[617,28,566,26],[617,29,566,27,"nextRequestId"],[617,42,566,40],[618,8,567,4],[618,12,567,8],[618,13,567,9,"_nextRequestId"],[618,27,567,23],[618,29,567,25],[619,8,568,4],[619,12,568,8,"options"],[619,19,568,15],[619,24,568,20],[619,29,568,25],[619,30,568,26],[619,32,568,28],[620,10,569,6],[620,14,569,12,"optimisticUpdate"],[620,30,569,28],[620,33,569,31,"options"],[620,40,569,38],[620,41,569,39,"optimisticUpdate"],[620,57,569,55],[621,10,570,6],[621,14,570,10,"optimisticUpdate"],[621,30,570,26],[621,35,570,31],[621,40,570,36],[621,41,570,37],[621,43,570,39],[622,12,571,8],[622,16,571,14,"wrappedUpdate"],[622,29,571,27],[622,32,571,31,"localQueryStore"],[622,47,571,46],[622,51,571,51],[623,14,572,10],[623,18,572,16,"result"],[623,24,572,22],[623,27,572,25,"optimisticUpdate"],[623,43,572,41],[623,44,573,12,"localQueryStore"],[623,59,573,27],[623,61,574,12,"mutationArgs"],[623,73,575,10],[623,74,575,11],[624,14,576,10],[624,18,576,14,"result"],[624,24,576,20],[624,36,576,32,"Promise"],[624,43,576,39],[624,45,576,41],[625,16,577,12],[625,20,577,16],[625,21,577,17,"logger"],[625,27,577,23],[625,28,577,24,"warn"],[625,32,577,28],[625,33,578,14],[625,122,579,12],[625,123,579,13],[626,14,580,10],[627,12,581,8],[627,13,581,9],[628,12,582,8],[628,16,582,14,"changedQueryTokens"],[628,34,582,32],[628,37,582,35],[628,41,582,39],[628,42,582,40,"optimisticQueryResults"],[628,64,582,62],[628,65,582,63,"applyOptimisticUpdate"],[628,86,582,84],[628,87,583,10,"wrappedUpdate"],[628,100,583,23],[628,102,584,10,"requestId"],[628,111,585,8],[628,112,585,9],[629,12,586,8],[629,16,586,14,"changedQueries"],[629,30,586,28],[629,33,586,31,"changedQueryTokens"],[629,51,586,49],[629,52,586,50,"map"],[629,55,586,53],[629,56,586,55,"token"],[629,61,586,60],[629,65,586,65],[630,14,587,10],[630,18,587,16,"localResult"],[630,29,587,27],[630,32,587,30],[630,36,587,34],[630,37,587,35,"localQueryResultByToken"],[630,60,587,58],[630,61,587,59,"token"],[630,66,587,64],[630,67,587,65],[631,14,588,10],[631,21,588,17],[632,16,589,12,"token"],[632,21,589,17],[633,16,590,12,"modification"],[633,28,590,24],[633,30,590,26],[634,18,591,14,"kind"],[634,22,591,18],[634,24,591,20],[634,33,591,29],[635,18,592,14,"result"],[635,24,592,20],[635,26,592,22,"localResult"],[635,37,592,33],[635,42,592,38],[635,47,592,43],[635,48,592,44],[635,51,592,47],[635,56,592,52],[635,57,592,53],[635,60,592,56],[636,20,593,16,"success"],[636,27,593,23],[636,29,593,25],[636,33,593,29],[637,20,594,16,"value"],[637,25,594,21],[637,27,594,23,"localResult"],[637,38,594,34],[638,20,595,16,"logLines"],[638,28,595,24],[638,30,595,26],[639,18,596,14],[640,16,597,12],[641,14,598,10],[641,15,598,11],[642,12,599,8],[642,13,599,9],[642,14,599,10],[643,12,600,8],[643,16,600,12],[643,17,600,13,"handleTransition"],[643,33,600,29],[643,34,600,30],[644,14,601,10,"queries"],[644,21,601,17],[644,23,601,19,"changedQueries"],[644,37,601,33],[645,14,602,10,"reflectedMutations"],[645,32,602,28],[645,34,602,30],[645,36,602,32],[646,14,603,10,"timestamp"],[646,23,603,19],[646,25,603,21],[646,29,603,25],[646,30,603,26,"remoteQuerySet"],[646,44,603,40],[646,45,603,41,"timestamp"],[646,54,603,50],[646,55,603,51],[647,12,604,8],[647,13,604,9],[647,14,604,10],[648,10,605,6],[649,8,606,4],[650,8,607,4],[650,12,607,10,"message"],[650,19,607,17],[650,22,607,20],[651,10,608,6,"type"],[651,14,608,10],[651,16,608,12],[651,26,608,22],[652,10,609,6,"requestId"],[652,19,609,15],[653,10,610,6,"udfPath"],[653,17,610,13],[654,10,611,6,"componentPath"],[654,23,611,19],[655,10,612,6,"args"],[655,14,612,10],[655,16,612,12],[655,17,612,13],[655,18,612,14],[655,19,612,15],[655,21,612,17,"import_values"],[655,34,612,30],[655,35,612,31,"convexToJson"],[655,47,612,43],[655,49,612,45,"mutationArgs"],[655,61,612,57],[655,62,612,58],[656,8,613,4],[656,9,613,5],[657,8,614,4],[657,12,614,10,"mightBeSent"],[657,23,614,21],[657,26,614,24],[657,30,614,28],[657,31,614,29,"webSocketManager"],[657,47,614,45],[657,48,614,46,"sendMessage"],[657,59,614,57],[657,60,614,58,"message"],[657,67,614,65],[657,68,614,66],[658,8,615,4],[658,12,615,10,"mutationPromise"],[658,27,615,25],[658,30,615,28],[658,34,615,32],[658,35,615,33,"requestManager"],[658,49,615,47],[658,50,615,48,"request"],[658,57,615,55],[658,58,615,56,"message"],[658,65,615,63],[658,67,615,65,"mightBeSent"],[658,78,615,76],[658,79,615,77],[659,8,616,4],[659,15,616,11],[660,10,617,6,"requestId"],[660,19,617,15],[661,10,618,6,"mutationPromise"],[662,8,619,4],[662,9,619,5],[663,6,620,2],[664,6,621,2],[665,0,622,0],[666,0,623,0],[667,0,624,0],[668,0,625,0],[669,0,626,0],[670,0,627,0],[671,0,628,0],[672,4,621,2],[673,6,621,2,"key"],[673,9,621,2],[674,6,621,2,"value"],[674,11,621,2],[675,8,621,2],[675,12,621,2,"_action"],[675,19,621,2],[675,22,621,2,"_asyncToGenerator"],[675,39,621,2],[675,40,629,2],[675,51,629,15,"name"],[675,55,629,19],[675,57,629,21,"args"],[675,61,629,25],[675,63,629,27],[676,10,630,4],[676,14,630,10,"result"],[676,20,630,16],[676,29,630,25],[676,33,630,29],[676,34,630,30,"actionInternal"],[676,48,630,44],[676,49,630,45,"name"],[676,53,630,49],[676,55,630,51,"args"],[676,59,630,55],[676,60,630,56],[677,10,631,4],[677,14,631,8],[677,15,631,9,"result"],[677,21,631,15],[677,22,631,16,"success"],[677,29,631,23],[677,31,631,25],[678,12,632,6],[678,16,632,10,"result"],[678,22,632,16],[678,23,632,17,"errorData"],[678,32,632,26],[678,37,632,31],[678,42,632,36],[678,43,632,37],[678,45,632,39],[679,14,633,8],[679,20,633,14],[679,21,633,15],[679,22,633,16],[679,24,633,18,"import_logging"],[679,38,633,32],[679,39,633,33,"forwardData"],[679,50,633,44],[679,52,634,10,"result"],[679,58,634,16],[679,60,635,10],[679,64,635,14,"import_errors"],[679,77,635,27],[679,78,635,28,"ConvexError"],[679,89,635,39],[679,90,635,40],[679,91,635,41],[679,92,635,42],[679,94,635,44,"import_logging"],[679,108,635,58],[679,109,635,59,"createHybridErrorStacktrace"],[679,136,635,86],[679,138,635,88],[679,146,635,96],[679,148,635,98,"name"],[679,152,635,102],[679,154,635,104,"result"],[679,160,635,110],[679,161,635,111],[679,162,636,8],[679,163,636,9],[680,12,637,6],[681,12,638,6],[681,18,638,12],[681,22,638,16,"Error"],[681,27,638,21],[681,28,638,22],[681,29,638,23],[681,30,638,24],[681,32,638,26,"import_logging"],[681,46,638,40],[681,47,638,41,"createHybridErrorStacktrace"],[681,74,638,68],[681,76,638,70],[681,84,638,78],[681,86,638,80,"name"],[681,90,638,84],[681,92,638,86,"result"],[681,98,638,92],[681,99,638,93],[681,100,638,94],[682,10,639,4],[683,10,640,4],[683,17,640,11,"result"],[683,23,640,17],[683,24,640,18,"value"],[683,29,640,23],[684,8,641,2],[684,9,641,3],[685,8,641,3],[685,17,629,8,"action"],[685,23,629,14,"action"],[685,24,629,14,"_x8"],[685,27,629,14],[685,29,629,14,"_x9"],[685,32,629,14],[686,10,629,14],[686,17,629,14,"_action"],[686,24,629,14],[686,25,629,14,"apply"],[686,30,629,14],[686,37,629,14,"arguments"],[686,46,629,14],[687,8,629,14],[688,8,629,14],[688,15,629,8,"action"],[688,21,629,14],[689,6,629,14],[690,6,642,2],[691,0,643,0],[692,0,644,0],[693,6,642,2],[694,4,642,2],[695,6,642,2,"key"],[695,9,642,2],[696,6,642,2,"value"],[696,11,642,2],[697,8,642,2],[697,12,642,2,"_actionInternal"],[697,27,642,2],[697,30,642,2,"_asyncToGenerator"],[697,47,642,2],[697,48,645,2],[697,59,645,23,"udfPath"],[697,66,645,30],[697,68,645,32,"args"],[697,72,645,36],[697,74,645,38,"componentPath"],[697,87,645,51],[697,89,645,53],[698,10,646,4],[698,14,646,10,"actionArgs"],[698,24,646,20],[698,27,646,23],[698,28,646,24],[698,29,646,25],[698,31,646,27,"import_common"],[698,44,646,40],[698,45,646,41,"parseArgs"],[698,54,646,50],[698,56,646,52,"args"],[698,60,646,56],[698,61,646,57],[699,10,647,4],[699,14,647,10,"requestId"],[699,23,647,19],[699,26,647,22],[699,30,647,26],[699,31,647,27,"nextRequestId"],[699,44,647,40],[700,10,648,4],[700,14,648,8],[700,15,648,9,"_nextRequestId"],[700,29,648,23],[700,31,648,25],[701,10,649,4],[701,14,649,8],[701,15,649,9,"tryReportLongDisconnect"],[701,38,649,32],[701,39,649,33],[701,40,649,34],[702,10,650,4],[702,14,650,10,"message"],[702,21,650,17],[702,24,650,20],[703,12,651,6,"type"],[703,16,651,10],[703,18,651,12],[703,26,651,20],[704,12,652,6,"requestId"],[704,21,652,15],[705,12,653,6,"udfPath"],[705,19,653,13],[706,12,654,6,"componentPath"],[706,25,654,19],[707,12,655,6,"args"],[707,16,655,10],[707,18,655,12],[707,19,655,13],[707,20,655,14],[707,21,655,15],[707,23,655,17,"import_values"],[707,36,655,30],[707,37,655,31,"convexToJson"],[707,49,655,43],[707,51,655,45,"actionArgs"],[707,61,655,55],[707,62,655,56],[708,10,656,4],[708,11,656,5],[709,10,657,4],[709,14,657,10,"mightBeSent"],[709,25,657,21],[709,28,657,24],[709,32,657,28],[709,33,657,29,"webSocketManager"],[709,49,657,45],[709,50,657,46,"sendMessage"],[709,61,657,57],[709,62,657,58,"message"],[709,69,657,65],[709,70,657,66],[710,10,658,4],[710,17,658,11],[710,21,658,15],[710,22,658,16,"requestManager"],[710,36,658,30],[710,37,658,31,"request"],[710,44,658,38],[710,45,658,39,"message"],[710,52,658,46],[710,54,658,48,"mightBeSent"],[710,65,658,59],[710,66,658,60],[711,8,659,2],[711,9,659,3],[712,8,659,3],[712,17,645,8,"actionInternal"],[712,31,645,22,"actionInternal"],[712,32,645,22,"_x0"],[712,35,645,22],[712,37,645,22,"_x1"],[712,40,645,22],[712,42,645,22,"_x10"],[712,46,645,22],[713,10,645,22],[713,17,645,22,"_actionInternal"],[713,32,645,22],[713,33,645,22,"apply"],[713,38,645,22],[713,45,645,22,"arguments"],[713,54,645,22],[714,8,645,22],[715,8,645,22],[715,15,645,8,"actionInternal"],[715,29,645,22],[716,6,645,22],[717,6,660,2],[718,0,661,0],[719,0,662,0],[720,0,663,0],[721,0,664,0],[722,0,665,0],[723,0,666,0],[724,0,667,0],[725,6,660,2],[726,4,660,2],[727,6,660,2,"key"],[727,9,660,2],[728,6,660,2,"value"],[728,11,660,2],[729,8,660,2],[729,12,660,2,"_close"],[729,18,660,2],[729,21,660,2,"_asyncToGenerator"],[729,38,660,2],[729,39,668,2],[729,52,668,16],[730,10,669,4],[730,14,669,8],[730,15,669,9,"authenticationManager"],[730,36,669,30],[730,37,669,31,"stop"],[730,41,669,35],[730,42,669,36],[730,43,669,37],[731,10,670,4],[731,17,670,11],[731,21,670,15],[731,22,670,16,"webSocketManager"],[731,38,670,32],[731,39,670,33,"terminate"],[731,48,670,42],[731,49,670,43],[731,50,670,44],[732,8,671,2],[732,9,671,3],[733,8,671,3],[733,17,668,8,"close"],[733,22,668,13,"close"],[733,23,668,13],[734,10,668,13],[734,17,668,13,"_close"],[734,23,668,13],[734,24,668,13,"apply"],[734,29,668,13],[734,36,668,13,"arguments"],[734,45,668,13],[735,8,668,13],[736,8,668,13],[736,15,668,8,"close"],[736,20,668,13],[737,6,668,13],[738,6,672,2],[739,0,673,0],[740,0,674,0],[741,0,675,0],[742,0,676,0],[743,0,677,0],[744,6,672,2],[745,4,672,2],[746,6,672,2,"key"],[746,9,672,2],[747,6,672,2,"get"],[747,9,672,2],[747,11,678,2],[747,20,678,2,"get"],[747,21,678,2],[747,23,678,12],[748,8,679,4],[748,15,679,11],[748,19,679,15],[748,20,679,16,"address"],[748,27,679,23],[749,6,680,2],[750,6,681,2],[751,0,682,0],[752,0,683,0],[753,4,681,2],[754,6,681,2,"key"],[754,9,681,2],[755,6,681,2,"get"],[755,9,681,2],[755,11,684,2],[755,20,684,2,"get"],[755,21,684,2],[755,23,684,22],[756,8,685,4],[756,15,685,11],[756,19,685,15],[756,20,685,16,"_nextRequestId"],[756,34,685,30],[757,6,686,2],[758,6,687,2],[759,0,688,0],[760,0,689,0],[761,4,687,2],[762,6,687,2,"key"],[762,9,687,2],[763,6,687,2,"get"],[763,9,687,2],[763,11,690,2],[763,20,690,2,"get"],[763,21,690,2],[763,23,690,18],[764,8,691,4],[764,15,691,11],[764,19,691,15],[764,20,691,16,"_sessionId"],[764,30,691,26],[765,6,692,2],[766,6,693,2],[767,0,694,0],[768,0,695,0],[769,0,696,0],[770,4,693,2],[771,6,693,2,"key"],[771,9,693,2],[772,6,693,2,"value"],[772,11,693,2],[772,13,697,2],[772,22,697,2,"reportMarks"],[772,33,697,13,"reportMarks"],[772,34,697,13],[772,36,697,16],[773,8,698,4],[773,12,698,8],[773,16,698,12],[773,17,698,13,"debug"],[773,22,698,18],[773,24,698,20],[774,10,699,6],[774,14,699,12,"report"],[774,20,699,18],[774,23,699,21],[774,24,699,22],[774,25,699,23],[774,27,699,25,"import_metrics"],[774,41,699,39],[774,42,699,40,"getMarksReport"],[774,56,699,54],[774,58,699,56],[774,62,699,60],[774,63,699,61,"sessionId"],[774,72,699,70],[774,73,699,71],[775,10,700,6],[775,14,700,10],[775,15,700,11,"webSocketManager"],[775,31,700,27],[775,32,700,28,"sendMessage"],[775,43,700,39],[775,44,700,40],[776,12,701,8,"type"],[776,16,701,12],[776,18,701,14],[776,25,701,21],[777,12,702,8,"eventType"],[777,21,702,17],[777,23,702,19],[777,38,702,34],[778,12,703,8,"event"],[778,17,703,13],[778,19,703,15,"report"],[779,10,704,6],[779,11,704,7],[779,12,704,8],[780,8,705,4],[781,6,706,2],[782,4,706,3],[783,6,706,3,"key"],[783,9,706,3],[784,6,706,3,"value"],[784,11,706,3],[784,13,707,2],[784,22,707,2,"tryReportLongDisconnect"],[784,45,707,25,"tryReportLongDisconnect"],[784,46,707,25],[784,48,707,28],[785,8,708,4],[785,12,708,8],[785,13,708,9],[785,17,708,13],[785,18,708,14,"debug"],[785,23,708,19],[785,25,708,21],[786,10,709,6],[787,8,710,4],[788,8,711,4],[788,12,711,10,"timeOfOldestRequest"],[788,31,711,29],[788,34,711,32],[788,38,711,36],[788,39,711,37,"connectionState"],[788,54,711,52],[788,55,711,53],[788,56,711,54],[788,57,711,55,"timeOfOldestInflightRequest"],[788,84,711,82],[789,8,712,4],[789,12,712,8,"timeOfOldestRequest"],[789,31,712,27],[789,36,712,32],[789,40,712,36],[789,44,712,40,"Date"],[789,48,712,44],[789,49,712,45,"now"],[789,52,712,48],[789,53,712,49],[789,54,712,50],[789,57,712,53,"timeOfOldestRequest"],[789,76,712,72],[789,77,712,73,"getTime"],[789,84,712,80],[789,85,712,81],[789,86,712,82],[789,90,712,86],[789,92,712,88],[789,95,712,91],[789,98,712,94],[789,100,712,96],[790,10,713,6],[791,8,714,4],[792,8,715,4],[792,12,715,10,"endpoint"],[792,20,715,18],[792,23,715,21],[792,26,715,24],[792,30,715,28],[792,31,715,29,"address"],[792,38,715,36],[792,56,715,54],[793,8,716,4,"fetch"],[793,13,716,9],[793,14,716,10,"endpoint"],[793,22,716,18],[793,24,716,20],[794,10,717,6,"method"],[794,16,717,12],[794,18,717,14],[794,24,717,20],[795,10,718,6,"headers"],[795,17,718,13],[795,19,718,15],[796,12,719,8],[796,26,719,22],[796,28,719,24],[796,46,719,42],[797,12,720,8],[797,27,720,23],[797,29,720,25],[797,36,720,32,"import__"],[797,44,720,40],[797,45,720,41,"version"],[797,52,720,48],[798,10,721,6],[798,11,721,7],[799,10,722,6,"body"],[799,14,722,10],[799,16,722,12,"JSON"],[799,20,722,16],[799,21,722,17,"stringify"],[799,30,722,26],[799,31,722,27],[800,12,722,29,"event"],[800,17,722,34],[800,19,722,36],[801,10,722,62],[801,11,722,63],[802,8,723,4],[802,9,723,5],[802,10,723,6],[802,11,723,7,"then"],[802,15,723,11],[802,16,723,13,"response"],[802,24,723,21],[802,28,723,26],[803,10,724,6],[803,14,724,10],[803,15,724,11,"response"],[803,23,724,19],[803,24,724,20,"ok"],[803,26,724,22],[803,28,724,24],[804,12,725,8],[804,16,725,12],[804,17,725,13,"logger"],[804,23,725,19],[804,24,725,20,"warn"],[804,28,725,24],[804,29,726,10],[804,70,726,51],[804,72,727,10,"response"],[804,80,727,18],[804,81,727,19,"body"],[804,85,728,8],[804,86,728,9],[805,10,729,6],[806,8,730,4],[806,9,730,5],[806,10,730,6],[806,11,730,7,"catch"],[806,16,730,12],[806,17,730,14,"error"],[806,22,730,19],[806,26,730,24],[807,10,731,6],[807,14,731,10],[807,15,731,11,"logger"],[807,21,731,17],[807,22,731,18,"warn"],[807,26,731,22],[807,27,731,23],[807,66,731,62],[807,68,731,64,"error"],[807,73,731,69],[807,74,731,70],[808,8,732,4],[808,9,732,5],[808,10,732,6],[809,6,733,2],[810,4,733,3],[811,2,733,3],[812,0,733,3],[812,3]],"functionMap":{"names":["<global>","__defNormalProp","__export","__copyProps","__defProp$argument_2.get","__toCommonJS","__publicField","__export$argument_1.BaseConvexClient","BaseConvexClient","BaseConvexClient#constructor","__publicField$argument_2","Promise.resolve.then$argument_0","import_remote_query_set.RemoteQuerySet$argument_0","pauseSocket","import_authentication_manager.AuthenticationManager$argument_1.authenticate","import_authentication_manager.AuthenticationManager$argument_1.stopSocket","import_authentication_manager.AuthenticationManager$argument_1.tryRestartSocket","import_authentication_manager.AuthenticationManager$argument_1.resumeSocket","import_authentication_manager.AuthenticationManager$argument_1.clearAuth","addOnTransitionHandler$argument_0","transition.queries.map$argument_0","window.addEventListener$argument_1","import_web_socket_manager.WebSocketManager$argument_1.onOpen","import_web_socket_manager.WebSocketManager$argument_1.onResume","import_web_socket_manager.WebSocketManager$argument_1.onMessage","BaseConvexClient#hasSyncedPastLastReconnect","BaseConvexClient#observedTimestamp","BaseConvexClient#getMaxObservedTimestamp","BaseConvexClient#notifyOnQueryResultChanges","changedQueryTokens.map$argument_0","Array.from.map$argument_0","BaseConvexClient#handleTransition","BaseConvexClient#addOnTransitionHandler","<anonymous>","BaseConvexClient#setAuth","BaseConvexClient#hasAuth","BaseConvexClient#setAdminAuth","BaseConvexClient#clearAuth","BaseConvexClient#subscribe","unsubscribe","BaseConvexClient#localQueryResult","BaseConvexClient#localQueryResultByToken","BaseConvexClient#hasLocalQueryResultByToken","BaseConvexClient#localQueryLogs","BaseConvexClient#queryJournal","BaseConvexClient#connectionState","BaseConvexClient#subscribeToConnectionState","BaseConvexClient#mutation","BaseConvexClient#mutationInternal","BaseConvexClient#enqueueMutation","wrappedUpdate","BaseConvexClient#action","BaseConvexClient#actionInternal","BaseConvexClient#close","BaseConvexClient#get__url","BaseConvexClient#get__nextRequestId","BaseConvexClient#get__sessionId","BaseConvexClient#reportMarks","BaseConvexClient#tryReportLongDisconnect","fetch.then$argument_0","fetch.then._catch$argument_0"],"mappings":"AAA;sBCK,yID;eEC;CFG;kBGC;kCCI,eD;CHG;mBKC,uEL;oBMC,0FN;oBOG,sBP;AQiB;ECS;oDCuB;kCCC;ODQ;KDC;gCCE;KDI;MGsC,0CH;wBIO;KJG;sBKI;SLI;oBMC,kCN;0BOC,wCP;sBQE,oCR;mBSC;STE;gCUQ;0CCC,cD;KVC;8CYW;OZO;gBaK;YVY,0CU;Sba;kBcC;SdW;mBeC;Sf0D;GDY;EiBM;GjBG;EkBC;GlBI;EmBC;GnBE;EoBS;sCCmB;ODS;QEE;UFG;GpBI;EuBC;GvBI;EwBU;WCG,sCD;GxBC;E0BS;G1BE;E2BC;G3BE;E4BE;G5BG;E6BC;G7BG;E8Be;mBCa;ODK;G9BE;EgCO;GhCI;EiCS;GjCE;EkCQ;GlCE;EmCI;GnCI;EoCU;GpCI;EqCO;GrCY;EsCW;WbG;KaE;GtCC;EuCW;GvCc;EwCI;GxCQ;EyCI;8BCQ;SDU;sDpBK;SoBa;GzCqB;E2CS;G3CY;E4CI;G5Cc;E6CS;G7CG;E8CO;G9CE;E+CI;G/CE;EgDI;GhDE;EiDK;GjDS;EkDC;YCgB;KDO,QE;KFE;GlDC;CRC"},"hasCjsExports":true},"type":"js/module"}]}