{"dependencies":[{"name":"./validators.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":26,"column":24,"index":1028},"end":{"line":26,"column":50,"index":1054}}],"key":"AA5SJ5YCYHmpyrsMAWKpRuLfrIE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __export = (target, all) => {\n    for (var name in all) __defProp(target, name, {\n      get: all[name],\n      enumerable: true\n    });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      var _loop = function (key) {\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n          get: () => from[key],\n          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n      };\n      for (var key of __getOwnPropNames(from)) {\n        _loop(key);\n      }\n    }\n    return to;\n  };\n  var __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n    value: true\n  }), mod);\n  var validator_exports = {};\n  __export(validator_exports, {\n    asObjectValidator: () => asObjectValidator,\n    isValidator: () => isValidator,\n    v: () => v\n  });\n  module.exports = __toCommonJS(validator_exports);\n  var import_validators = require(_dependencyMap[0], \"./validators.js\");\n  function isValidator(v2) {\n    return !!v2.isConvexValidator;\n  }\n  function asObjectValidator(obj) {\n    if (isValidator(obj)) {\n      return obj;\n    } else {\n      return v.object(obj);\n    }\n  }\n  var v = {\n    /**\n     * Validates that the value corresponds to an ID of a document in given table.\n     * @param tableName The name of the table.\n     */\n    id: tableName => {\n      return new import_validators.VId({\n        isOptional: \"required\",\n        tableName\n      });\n    },\n    /**\n     * Validates that the value is of type Null.\n     */\n    null: () => {\n      return new import_validators.VNull({\n        isOptional: \"required\"\n      });\n    },\n    /**\n     * Validates that the value is of Convex type Float64 (Number in JS).\n     *\n     * Alias for `v.float64()`\n     */\n    number: () => {\n      return new import_validators.VFloat64({\n        isOptional: \"required\"\n      });\n    },\n    /**\n     * Validates that the value is of Convex type Float64 (Number in JS).\n     */\n    float64: () => {\n      return new import_validators.VFloat64({\n        isOptional: \"required\"\n      });\n    },\n    /**\n     * @deprecated Use `v.int64()` instead\n     */\n    bigint: () => {\n      return new import_validators.VInt64({\n        isOptional: \"required\"\n      });\n    },\n    /**\n     * Validates that the value is of Convex type Int64 (BigInt in JS).\n     */\n    int64: () => {\n      return new import_validators.VInt64({\n        isOptional: \"required\"\n      });\n    },\n    /**\n     * Validates that the value is of type Boolean.\n     */\n    boolean: () => {\n      return new import_validators.VBoolean({\n        isOptional: \"required\"\n      });\n    },\n    /**\n     * Validates that the value is of type String.\n     */\n    string: () => {\n      return new import_validators.VString({\n        isOptional: \"required\"\n      });\n    },\n    /**\n     * Validates that the value is of Convex type Bytes (constructed in JS via `ArrayBuffer`).\n     */\n    bytes: () => {\n      return new import_validators.VBytes({\n        isOptional: \"required\"\n      });\n    },\n    /**\n     * Validates that the value is equal to the given literal value.\n     * @param literal The literal value to compare against.\n     */\n    literal: literal => {\n      return new import_validators.VLiteral({\n        isOptional: \"required\",\n        value: literal\n      });\n    },\n    /**\n     * Validates that the value is an Array of the given element type.\n     * @param element The validator for the elements of the array.\n     */\n    array: element => {\n      return new import_validators.VArray({\n        isOptional: \"required\",\n        element\n      });\n    },\n    /**\n     * Validates that the value is an Object with the given properties.\n     * @param fields An object specifying the validator for each property.\n     */\n    object: fields => {\n      return new import_validators.VObject({\n        isOptional: \"required\",\n        fields\n      });\n    },\n    /**\n     * Validates that the value is a Record with keys and values that match the given types.\n     * @param keys The validator for the keys of the record. This cannot contain string literals.\n     * @param values The validator for the values of the record.\n     */\n    record: (keys, values) => {\n      return new import_validators.VRecord({\n        isOptional: \"required\",\n        key: keys,\n        value: values\n      });\n    },\n    /**\n     * Validates that the value matches one of the given validators.\n     * @param members The validators to match against.\n     */\n    union: function () {\n      for (var _len = arguments.length, members = new Array(_len), _key = 0; _key < _len; _key++) {\n        members[_key] = arguments[_key];\n      }\n      return new import_validators.VUnion({\n        isOptional: \"required\",\n        members\n      });\n    },\n    /**\n     * Does not validate the value.\n     */\n    any: () => {\n      return new import_validators.VAny({\n        isOptional: \"required\"\n      });\n    },\n    /**\n     * Allows not specifying a value for a property in an Object.\n     * @param value The property value validator to make optional.\n     *\n     * ```typescript\n     * const objectWithOptionalFields = v.object({\n     *   requiredField: v.string(),\n     *   optionalField: v.optional(v.string()),\n     * });\n     * ```\n     */\n    optional: value => {\n      return value.asOptional();\n    }\n  };\n});","lineCount":204,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__defProp"],[4,15,2,13],[4,18,2,16,"Object"],[4,24,2,22],[4,25,2,23,"defineProperty"],[4,39,2,37],[5,2,3,0],[5,6,3,4,"__getOwnPropDesc"],[5,22,3,20],[5,25,3,23,"Object"],[5,31,3,29],[5,32,3,30,"getOwnPropertyDescriptor"],[5,56,3,54],[6,2,4,0],[6,6,4,4,"__getOwnPropNames"],[6,23,4,21],[6,26,4,24,"Object"],[6,32,4,30],[6,33,4,31,"getOwnPropertyNames"],[6,52,4,50],[7,2,5,0],[7,6,5,4,"__hasOwnProp"],[7,18,5,16],[7,21,5,19,"Object"],[7,27,5,25],[7,28,5,26,"prototype"],[7,37,5,35],[7,38,5,36,"hasOwnProperty"],[7,52,5,50],[8,2,6,0],[8,6,6,4,"__export"],[8,14,6,12],[8,17,6,15,"__export"],[8,18,6,16,"target"],[8,24,6,22],[8,26,6,24,"all"],[8,29,6,27],[8,34,6,32],[9,4,7,2],[9,9,7,7],[9,13,7,11,"name"],[9,17,7,15],[9,21,7,19,"all"],[9,24,7,22],[9,26,8,4,"__defProp"],[9,35,8,13],[9,36,8,14,"target"],[9,42,8,20],[9,44,8,22,"name"],[9,48,8,26],[9,50,8,28],[10,6,8,30,"get"],[10,9,8,33],[10,11,8,35,"all"],[10,14,8,38],[10,15,8,39,"name"],[10,19,8,43],[10,20,8,44],[11,6,8,46,"enumerable"],[11,16,8,56],[11,18,8,58],[12,4,8,63],[12,5,8,64],[12,6,8,65],[13,2,9,0],[13,3,9,1],[14,2,10,0],[14,6,10,4,"__copyProps"],[14,17,10,15],[14,20,10,18,"__copyProps"],[14,21,10,19,"to"],[14,23,10,21],[14,25,10,23,"from"],[14,29,10,27],[14,31,10,29,"except"],[14,37,10,35],[14,39,10,37,"desc"],[14,43,10,41],[14,48,10,46],[15,4,11,2],[15,8,11,6,"from"],[15,12,11,10],[15,16,11,14],[15,23,11,21,"from"],[15,27,11,25],[15,32,11,30],[15,40,11,38],[15,44,11,42],[15,51,11,49,"from"],[15,55,11,53],[15,60,11,58],[15,70,11,68],[15,72,11,70],[16,6,11,70],[16,10,11,70,"_loop"],[16,15,11,70],[16,27,11,70,"_loop"],[16,28,11,70,"key"],[16,31,11,70],[17,8,13,6],[17,12,13,10],[17,13,13,11,"__hasOwnProp"],[17,25,13,23],[17,26,13,24,"call"],[17,30,13,28],[17,31,13,29,"to"],[17,33,13,31],[17,35,13,33,"key"],[17,38,13,36],[17,39,13,37],[17,43,13,41,"key"],[17,46,13,44],[17,51,13,49,"except"],[17,57,13,55],[17,59,14,8,"__defProp"],[17,68,14,17],[17,69,14,18,"to"],[17,71,14,20],[17,73,14,22,"key"],[17,76,14,25],[17,78,14,27],[18,10,14,29,"get"],[18,13,14,32],[18,15,14,34,"get"],[18,16,14,34],[18,21,14,40,"from"],[18,25,14,44],[18,26,14,45,"key"],[18,29,14,48],[18,30,14,49],[19,10,14,51,"enumerable"],[19,20,14,61],[19,22,14,63],[19,24,14,65,"desc"],[19,28,14,69],[19,31,14,72,"__getOwnPropDesc"],[19,47,14,88],[19,48,14,89,"from"],[19,52,14,93],[19,54,14,95,"key"],[19,57,14,98],[19,58,14,99],[19,59,14,100],[19,63,14,104,"desc"],[19,67,14,108],[19,68,14,109,"enumerable"],[20,8,14,120],[20,9,14,121],[20,10,14,122],[21,6,14,123],[22,6,12,4],[22,11,12,9],[22,15,12,13,"key"],[22,18,12,16],[22,22,12,20,"__getOwnPropNames"],[22,39,12,37],[22,40,12,38,"from"],[22,44,12,42],[22,45,12,43],[23,8,12,43,"_loop"],[23,13,12,43],[23,14,12,43,"key"],[23,17,12,43],[24,6,12,43],[25,4,15,2],[26,4,16,2],[26,11,16,9,"to"],[26,13,16,11],[27,2,17,0],[27,3,17,1],[28,2,18,0],[28,6,18,4,"__toCommonJS"],[28,18,18,16],[28,21,18,20,"mod"],[28,24,18,23],[28,28,18,28,"__copyProps"],[28,39,18,39],[28,40,18,40,"__defProp"],[28,49,18,49],[28,50,18,50],[28,51,18,51],[28,52,18,52],[28,54,18,54],[28,66,18,66],[28,68,18,68],[29,4,18,70,"value"],[29,9,18,75],[29,11,18,77],[30,2,18,82],[30,3,18,83],[30,4,18,84],[30,6,18,86,"mod"],[30,9,18,89],[30,10,18,90],[31,2,19,0],[31,6,19,4,"validator_exports"],[31,23,19,21],[31,26,19,24],[31,27,19,25],[31,28,19,26],[32,2,20,0,"__export"],[32,10,20,8],[32,11,20,9,"validator_exports"],[32,28,20,26],[32,30,20,28],[33,4,21,2,"asObjectValidator"],[33,21,21,19],[33,23,21,21,"asObjectValidator"],[33,24,21,21],[33,29,21,27,"asObjectValidator"],[33,46,21,44],[34,4,22,2,"isValidator"],[34,15,22,13],[34,17,22,15,"isValidator"],[34,18,22,15],[34,23,22,21,"isValidator"],[34,34,22,32],[35,4,23,2,"v"],[35,5,23,3],[35,7,23,5,"v"],[35,8,23,5],[35,13,23,11,"v"],[36,2,24,0],[36,3,24,1],[36,4,24,2],[37,2,25,0,"module"],[37,8,25,6],[37,9,25,7,"exports"],[37,16,25,14],[37,19,25,17,"__toCommonJS"],[37,31,25,29],[37,32,25,30,"validator_exports"],[37,49,25,47],[37,50,25,48],[38,2,26,0],[38,6,26,4,"import_validators"],[38,23,26,21],[38,26,26,24,"require"],[38,33,26,31],[38,34,26,31,"_dependencyMap"],[38,48,26,31],[38,70,26,49],[38,71,26,50],[39,2,27,0],[39,11,27,9,"isValidator"],[39,22,27,20,"isValidator"],[39,23,27,21,"v2"],[39,25,27,23],[39,27,27,25],[40,4,28,2],[40,11,28,9],[40,12,28,10],[40,13,28,11,"v2"],[40,15,28,13],[40,16,28,14,"isConvexValidator"],[40,33,28,31],[41,2,29,0],[42,2,30,0],[42,11,30,9,"asObjectValidator"],[42,28,30,26,"asObjectValidator"],[42,29,30,27,"obj"],[42,32,30,30],[42,34,30,32],[43,4,31,2],[43,8,31,6,"isValidator"],[43,19,31,17],[43,20,31,18,"obj"],[43,23,31,21],[43,24,31,22],[43,26,31,24],[44,6,32,4],[44,13,32,11,"obj"],[44,16,32,14],[45,4,33,2],[45,5,33,3],[45,11,33,9],[46,6,34,4],[46,13,34,11,"v"],[46,14,34,12],[46,15,34,13,"object"],[46,21,34,19],[46,22,34,20,"obj"],[46,25,34,23],[46,26,34,24],[47,4,35,2],[48,2,36,0],[49,2,37,0],[49,6,37,6,"v"],[49,7,37,7],[49,10,37,10],[50,4,38,2],[51,0,39,0],[52,0,40,0],[53,0,41,0],[54,4,42,2,"id"],[54,6,42,4],[54,8,42,7,"tableName"],[54,17,42,16],[54,21,42,21],[55,6,43,4],[55,13,43,11],[55,17,43,15,"import_validators"],[55,34,43,32],[55,35,43,33,"VId"],[55,38,43,36],[55,39,43,37],[56,8,44,6,"isOptional"],[56,18,44,16],[56,20,44,18],[56,30,44,28],[57,8,45,6,"tableName"],[58,6,46,4],[58,7,46,5],[58,8,46,6],[59,4,47,2],[59,5,47,3],[60,4,48,2],[61,0,49,0],[62,0,50,0],[63,4,51,2,"null"],[63,8,51,6],[63,10,51,8,"null"],[63,11,51,8],[63,16,51,14],[64,6,52,4],[64,13,52,11],[64,17,52,15,"import_validators"],[64,34,52,32],[64,35,52,33,"VNull"],[64,40,52,38],[64,41,52,39],[65,8,52,41,"isOptional"],[65,18,52,51],[65,20,52,53],[66,6,52,64],[66,7,52,65],[66,8,52,66],[67,4,53,2],[67,5,53,3],[68,4,54,2],[69,0,55,0],[70,0,56,0],[71,0,57,0],[72,0,58,0],[73,4,59,2,"number"],[73,10,59,8],[73,12,59,10,"number"],[73,13,59,10],[73,18,59,16],[74,6,60,4],[74,13,60,11],[74,17,60,15,"import_validators"],[74,34,60,32],[74,35,60,33,"VFloat64"],[74,43,60,41],[74,44,60,42],[75,8,60,44,"isOptional"],[75,18,60,54],[75,20,60,56],[76,6,60,67],[76,7,60,68],[76,8,60,69],[77,4,61,2],[77,5,61,3],[78,4,62,2],[79,0,63,0],[80,0,64,0],[81,4,65,2,"float64"],[81,11,65,9],[81,13,65,11,"float64"],[81,14,65,11],[81,19,65,17],[82,6,66,4],[82,13,66,11],[82,17,66,15,"import_validators"],[82,34,66,32],[82,35,66,33,"VFloat64"],[82,43,66,41],[82,44,66,42],[83,8,66,44,"isOptional"],[83,18,66,54],[83,20,66,56],[84,6,66,67],[84,7,66,68],[84,8,66,69],[85,4,67,2],[85,5,67,3],[86,4,68,2],[87,0,69,0],[88,0,70,0],[89,4,71,2,"bigint"],[89,10,71,8],[89,12,71,10,"bigint"],[89,13,71,10],[89,18,71,16],[90,6,72,4],[90,13,72,11],[90,17,72,15,"import_validators"],[90,34,72,32],[90,35,72,33,"VInt64"],[90,41,72,39],[90,42,72,40],[91,8,72,42,"isOptional"],[91,18,72,52],[91,20,72,54],[92,6,72,65],[92,7,72,66],[92,8,72,67],[93,4,73,2],[93,5,73,3],[94,4,74,2],[95,0,75,0],[96,0,76,0],[97,4,77,2,"int64"],[97,9,77,7],[97,11,77,9,"int64"],[97,12,77,9],[97,17,77,15],[98,6,78,4],[98,13,78,11],[98,17,78,15,"import_validators"],[98,34,78,32],[98,35,78,33,"VInt64"],[98,41,78,39],[98,42,78,40],[99,8,78,42,"isOptional"],[99,18,78,52],[99,20,78,54],[100,6,78,65],[100,7,78,66],[100,8,78,67],[101,4,79,2],[101,5,79,3],[102,4,80,2],[103,0,81,0],[104,0,82,0],[105,4,83,2,"boolean"],[105,11,83,9],[105,13,83,11,"boolean"],[105,14,83,11],[105,19,83,17],[106,6,84,4],[106,13,84,11],[106,17,84,15,"import_validators"],[106,34,84,32],[106,35,84,33,"VBoolean"],[106,43,84,41],[106,44,84,42],[107,8,84,44,"isOptional"],[107,18,84,54],[107,20,84,56],[108,6,84,67],[108,7,84,68],[108,8,84,69],[109,4,85,2],[109,5,85,3],[110,4,86,2],[111,0,87,0],[112,0,88,0],[113,4,89,2,"string"],[113,10,89,8],[113,12,89,10,"string"],[113,13,89,10],[113,18,89,16],[114,6,90,4],[114,13,90,11],[114,17,90,15,"import_validators"],[114,34,90,32],[114,35,90,33,"VString"],[114,42,90,40],[114,43,90,41],[115,8,90,43,"isOptional"],[115,18,90,53],[115,20,90,55],[116,6,90,66],[116,7,90,67],[116,8,90,68],[117,4,91,2],[117,5,91,3],[118,4,92,2],[119,0,93,0],[120,0,94,0],[121,4,95,2,"bytes"],[121,9,95,7],[121,11,95,9,"bytes"],[121,12,95,9],[121,17,95,15],[122,6,96,4],[122,13,96,11],[122,17,96,15,"import_validators"],[122,34,96,32],[122,35,96,33,"VBytes"],[122,41,96,39],[122,42,96,40],[123,8,96,42,"isOptional"],[123,18,96,52],[123,20,96,54],[124,6,96,65],[124,7,96,66],[124,8,96,67],[125,4,97,2],[125,5,97,3],[126,4,98,2],[127,0,99,0],[128,0,100,0],[129,0,101,0],[130,4,102,2,"literal"],[130,11,102,9],[130,13,102,12,"literal"],[130,20,102,19],[130,24,102,24],[131,6,103,4],[131,13,103,11],[131,17,103,15,"import_validators"],[131,34,103,32],[131,35,103,33,"VLiteral"],[131,43,103,41],[131,44,103,42],[132,8,103,44,"isOptional"],[132,18,103,54],[132,20,103,56],[132,30,103,66],[133,8,103,68,"value"],[133,13,103,73],[133,15,103,75,"literal"],[134,6,103,83],[134,7,103,84],[134,8,103,85],[135,4,104,2],[135,5,104,3],[136,4,105,2],[137,0,106,0],[138,0,107,0],[139,0,108,0],[140,4,109,2,"array"],[140,9,109,7],[140,11,109,10,"element"],[140,18,109,17],[140,22,109,22],[141,6,110,4],[141,13,110,11],[141,17,110,15,"import_validators"],[141,34,110,32],[141,35,110,33,"VArray"],[141,41,110,39],[141,42,110,40],[142,8,110,42,"isOptional"],[142,18,110,52],[142,20,110,54],[142,30,110,64],[143,8,110,66,"element"],[144,6,110,74],[144,7,110,75],[144,8,110,76],[145,4,111,2],[145,5,111,3],[146,4,112,2],[147,0,113,0],[148,0,114,0],[149,0,115,0],[150,4,116,2,"object"],[150,10,116,8],[150,12,116,11,"fields"],[150,18,116,17],[150,22,116,22],[151,6,117,4],[151,13,117,11],[151,17,117,15,"import_validators"],[151,34,117,32],[151,35,117,33,"VObject"],[151,42,117,40],[151,43,117,41],[152,8,117,43,"isOptional"],[152,18,117,53],[152,20,117,55],[152,30,117,65],[153,8,117,67,"fields"],[154,6,117,74],[154,7,117,75],[154,8,117,76],[155,4,118,2],[155,5,118,3],[156,4,119,2],[157,0,120,0],[158,0,121,0],[159,0,122,0],[160,0,123,0],[161,4,124,2,"record"],[161,10,124,8],[161,12,124,10,"record"],[161,13,124,11,"keys"],[161,17,124,15],[161,19,124,17,"values"],[161,25,124,23],[161,30,124,28],[162,6,125,4],[162,13,125,11],[162,17,125,15,"import_validators"],[162,34,125,32],[162,35,125,33,"VRecord"],[162,42,125,40],[162,43,125,41],[163,8,126,6,"isOptional"],[163,18,126,16],[163,20,126,18],[163,30,126,28],[164,8,127,6,"key"],[164,11,127,9],[164,13,127,11,"keys"],[164,17,127,15],[165,8,128,6,"value"],[165,13,128,11],[165,15,128,13,"values"],[166,6,129,4],[166,7,129,5],[166,8,129,6],[167,4,130,2],[167,5,130,3],[168,4,131,2],[169,0,132,0],[170,0,133,0],[171,0,134,0],[172,4,135,2,"union"],[172,9,135,7],[172,11,135,9],[172,20,135,9,"union"],[172,21,135,9],[172,23,135,25],[173,6,135,25],[173,15,135,25,"_len"],[173,19,135,25],[173,22,135,25,"arguments"],[173,31,135,25],[173,32,135,25,"length"],[173,38,135,25],[173,40,135,13,"members"],[173,47,135,20],[173,54,135,20,"Array"],[173,59,135,20],[173,60,135,20,"_len"],[173,64,135,20],[173,67,135,20,"_key"],[173,71,135,20],[173,77,135,20,"_key"],[173,81,135,20],[173,84,135,20,"_len"],[173,88,135,20],[173,90,135,20,"_key"],[173,94,135,20],[174,8,135,13,"members"],[174,15,135,20],[174,16,135,20,"_key"],[174,20,135,20],[174,24,135,20,"arguments"],[174,33,135,20],[174,34,135,20,"_key"],[174,38,135,20],[175,6,135,20],[176,6,136,4],[176,13,136,11],[176,17,136,15,"import_validators"],[176,34,136,32],[176,35,136,33,"VUnion"],[176,41,136,39],[176,42,136,40],[177,8,137,6,"isOptional"],[177,18,137,16],[177,20,137,18],[177,30,137,28],[178,8,138,6,"members"],[179,6,139,4],[179,7,139,5],[179,8,139,6],[180,4,140,2],[180,5,140,3],[181,4,141,2],[182,0,142,0],[183,0,143,0],[184,4,144,2,"any"],[184,7,144,5],[184,9,144,7,"any"],[184,10,144,7],[184,15,144,13],[185,6,145,4],[185,13,145,11],[185,17,145,15,"import_validators"],[185,34,145,32],[185,35,145,33,"VAny"],[185,39,145,37],[185,40,145,38],[186,8,145,40,"isOptional"],[186,18,145,50],[186,20,145,52],[187,6,145,63],[187,7,145,64],[187,8,145,65],[188,4,146,2],[188,5,146,3],[189,4,147,2],[190,0,148,0],[191,0,149,0],[192,0,150,0],[193,0,151,0],[194,0,152,0],[195,0,153,0],[196,0,154,0],[197,0,155,0],[198,0,156,0],[199,0,157,0],[200,4,158,2,"optional"],[200,12,158,10],[200,14,158,13,"value"],[200,19,158,18],[200,23,158,23],[201,6,159,4],[201,13,159,11,"value"],[201,18,159,16],[201,19,159,17,"asOptional"],[201,29,159,27],[201,30,159,28],[201,31,159,29],[202,4,160,2],[203,2,161,0],[203,3,161,1],[204,0,161,2],[204,3]],"functionMap":{"names":["<global>","__export","__copyProps","__defProp$argument_2.get","__toCommonJS","__export$argument_1.asObjectValidator","__export$argument_1.isValidator","__export$argument_1.v","isValidator","asObjectValidator","v.id","v._null","v.number","v.float64","v.bigint","v.int64","v.boolean","v.string","v.bytes","v.literal","v.array","v.object","v.record","v.union","v.any","v.optional"],"mappings":"AAA;eCK;CDG;kBEC;kCCI,eD;CFG;mBIC,uEJ;qBKG,uBL;eMC,iBN;KOC,OP;AQI;CRE;ASC;CTM;MUM;GVK;QWI;GXE;UYM;GZE;WaI;GbE;UcI;GdE;SeI;GfE;WgBI;GhBE;UiBI;GjBE;SkBI;GlBE;WmBK;GnBE;SoBK;GpBE;UqBK;GrBE;UsBM;GtBM;SuBK;GvBK;OwBI;GxBE;YyBY;GzBE"},"hasCjsExports":true},"type":"js/module"}]}